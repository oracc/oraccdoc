<?xml version="1.0" encoding="utf-8"?>
<esp:page
	xmlns:esp="http://oracc.org/ns/esp/1.0"
	xmlns="http://www.w3.org/1999/xhtml"
>

<esp:name>Building an ESP site</esp:name>
<esp:title>Checking, correcting, and rebuilding an ESP website</esp:title>

<html><head/><body>

<p class="firstpara">This page explains how to (re)build your ESP website, how to correct errors that emerge during the rebuild, and how to avoid them in the first place.</p>

<p>Errors in the structure and content of your XML may be picked up by your text editor, and will certainly be reported by Oracc when you come to rebuild your site. They will cause the generation of the associated page, or even of the whole site, to fail. The cause of such problems should usually be obvious from the error message.</p>

<p><esp:link bookmark="h_checkingasyouedit">Checking as you edit</esp:link> | <esp:link bookmark="h_rebuilding">Rebuilding</esp:link> | <esp:link bookmark="h_structuralerrors">Structural errors</esp:link> | <esp:link bookmark="h_someofthemorecrypticerrorsexplained">Some of the more cryptic errors explained</esp:link> | <esp:link bookmark="h_goodpracticeforavoidingerrors">Good practice for avoiding errors</esp:link></p>

<esp:h>Checking as you edit</esp:h>

<p>To save yourself inordinate amounts of time in checking and correcting, you should edit your XML files in Emacs, <esp:link page="esp-install">using the ESP templates and schemas</esp:link>. As you work, the mode line in Emacs will tell you whether your file is valid or not, by saying <code>(nXML valid)</code> or <code>(nXML invalid)</code>. Errors in your tagging will also be displayed in red in the main window.</p>

<p>To find and eliminate validation errors, move your cursor to the start of the buffer, then do <code class="cookbook">^C ^N</code>. The cursor will move to the next error, and an error message will appear in the mode line. Correct that error and do <code class="cookbook">^C ^N</code> again until the mode line reads <code>(nXML valid)</code>.</p>

<p>Regularly remind yourself of the recommendations in the <esp:link page="espstyle">Style Guide</esp:link> to help reduce errors too.</p>

<esp:h>Rebuilding</esp:h>
<p>When you have finished creating and editing XML pages and embedded content for your ESP website, make sure that all the files are in the correct directories on Oracc (see the <esp:link page="esp-overview">ESP overview</esp:link> page) and that <esp:link page="esp-setup" bookmark="h_siteparameters"><code>parameters.xml</code></esp:link> and <esp:link page="esp-setup" bookmark="h_sitestructure"><code>structure.xml</code></esp:link> have all been correctly edited.</p>

<p>Log in to Oracc with PuTTy or Terminal and type the command <code class="cookbook">oracc build portal</code>. When this has finished running, type <code class="cookbook">less oracc.log</code>. If there are no errors in your ESP code, you will see output like this:</p>

<pre class="listing">
ESP processing file:/home/oracc/doc2/01bld/espdev/about/licensing/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/contributing/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/contributing/howandwhy/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/standards/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/standards/schemas/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/standards/opendoc/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/about/standards/tei/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/tools/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/tools/cuneify/index.html
ESP processing file:/home/oracc/doc2/01bld/espdev/404/index.html
Validating pages as XHTML (only non-validating pages reported)
calling esp2-live.sh doc2 force ...
p3-colours.plx: using colours file 00lib/p3colours.txt
esp2 portal is now live at http://oracc.MUSEUM.upenn.edu/doc2
</pre>

<p>If there are errors, error messages will be interspersed with this listing (<esp:link bookmark="h_structuralerrors">see below</esp:link>) and the rebuild may fail. Correct all reported errors and run <code class="cookbook">oracc build portal</code> again. Do <code>less oracc.log</code> again.</p> 

<p>When there are no errors left, take a look at the site. You should thoroughly test every HTML page on the website whenever it is changed. Ensure that all parts behave as expected--for example, that all links are present and working. If there are problems, you will need to correct the corresponding XML files and rebuild the site once again.</p>

<!-- <p>Once you are satisfied with your site (after days, months, years.. you choose) you can make the new site go live on Oracc's public web server by running:</p>
<ul>
<li><code class="cookbook">oracc resources</code> to make any new images and downloads available to the server (you can omit this if there are none);</li>
<li>and then <code class="cookbook">oracc build portal</code>.</li> 
</ul> -->
<p>You can repeat this process as many times as you like.</p>

<esp:h>Structural errors</esp:h>
<p>The <code>oracc build portal</code> command will report any errors made during the rebuilding of the site, in <code>oracc.log</code>. Although errors are reported for the html files being generated, it is the associated xml files in <code>00web/</code> that must be fixed.</p>

<p>Usually the error messages will indicate clearly what has gone wrong. However, sometimes it takes experience (and/or some trial and error!) to decode them.  If you are unsure, try pasting the error message into Google and you may come up with some useful answers.  Contact the Oracc team if you need additional help.  Remember to make a note of anything that you may wish to refer to in future.</p>

<p>NB. The system does not do extensive error checking for consistency. You will get a warning message if you try to create a <code>&lt;esp:link&gt;</code> to a non-existent page, or if you use <code>&lt;esp:glossary&gt;</code> on a term that is not defined on the glossary page, but some other errors, such as wrong bookmarks, may not be reported.</p>

<p>After correcting any sources of error (e.g. mis-named files, badly formed XML, filenames with spaces in, etc.) and run the  <code>oracc build portal</code> again.  When no errors are returned, all pages of the site have been generated correctly.</p>

<esp:h>Some of the more cryptic errors explained</esp:h>

<esp:sh>Error before Phase 1 has started</esp:sh>
<dl>
<dt><code>Exception in thread "main" java.lang.NullPointerException at ImageInfo.main(ImageInfo.java:1025)</code></dt>
<dd>This error is returned by the script that automatically detects the size of images. It means that the size of one or more images couldn't be detected properly, and that image may not display properly on the website.  The most likely cause of this error is image files that contain a space in their filename (e.g. <code class="example">my great image.jpg</code>).  (Spaces are not permitted in image filenames in order for the script to work properly.) To solve the error: go through the images folder and remove any spaces from image filenames (i.e. change to <code class="example">mygreatimage.jpg</code>).  The error may also occur if files other than image files are placed in the images folder.</dd>
</dl>

<esp:sh>Validation errors</esp:sh>
<dl>
<dt><code>Error at line:x, column:x of file:///  tag name "div" is not allowed.</code></dt>
<dd>You have use an invalid element (in this example <code>&lt;div&gt;</code>). You will need to remove or replace it.</dd>

<dt>Error returned when &lt;esp:image&gt; tag refers to an image without a file extension</dt>
<dd>For instance, <code class="example">&lt;esp:image file=”picture1” ...&gt;</code> instead of the correct version: <code class="example">&lt;esp:image file=”picture1.jpg” ...&gt;</code>.</dd>
</dl>

<esp:h>Good practice for avoiding errors</esp:h>
<esp:sh>Using and nesting elements</esp:sh>
<p>Most XHTML and system elements can be used inside (nested in) most other XHTML and system elements. However, there are exceptions. Because of the syntax of XML/XHTML, certain system elements will not work in certain places. If you use an element in a place where it doesn’t work, it will be filtered out, and a warning will be generated at the final stage of processing.</p>

<p>Because the site claims to be valid XHTML, it must respect the XHTML specification. This places certain prohibitions on element nesting. </p>

<p>Broadly, you should avoid the following: </p>

<ul>
<li>Placing a block-level XHTML element, such as <code>&lt;p&gt;</code> or <code>&lt;blockquote&gt;</code> (or a system element which creates one), inside an inline XHTML element, such as <code>&lt;a&gt;</code> or <code>&lt;b&gt;</code> (or a system element which creates one).  NB.  This means that when using <code>&lt;blockquote&gt;</code> you should nest the tags <code>&lt;blockquote&gt;&lt;p&gt;text here&lt;/p&gt;&lt;/blockquote&gt;</code> rather than the other way around.</li>

<li>Placing a system element which creates an XHTML &lt;a&gt; element inside any other element that does so. This means that none of the elements <code>&lt;esp:bookmark&gt;</code>, <code>&lt;esp:link&gt;</code>, <code>&lt;esp:glossary&gt;</code>, <code>&lt;esp:reference&gt;</code>, and <code>&lt;esp:index&gt;</code> may occur inside any of those same elements.</li>
</ul>
<p>All of these errors are easily avoided if you edit your XML files in Emacs <esp:link page="esp-install">using the ESP schemas and templates</esp:link>.</p>


<esp:sh>Names and naming</esp:sh>
<p>To prevent errors, always use lowercase names for your files and when creating short page ids etc.  Do not use spaces in file names or ids; instead separate words with an underscore or a hyphen.</p>

<p>The text in the navigation bar is given by &lt;esp:name&gt; – see the documentation on <esp:link page="esp-setup" bookmark="h_pagestructure">page structure</esp:link>.  Keep <code>&lt;esp:name&gt;</code> entries short as they will be used in the navigation bar.</p> <!---->

<p>The page title is given by &lt;esp:title&gt;  – see the documentation on <esp:link page="esp-setup" bookmark="h_pagestructure">page structure</esp:link>.  This text can be much longer than that given in &lt;esp:name&gt;.</p>

<p>Links to internal pages should use the short page id defined in the &lt;esp:page&gt; tag in <code>structure.xml</code> – see the documentation on <esp:link page="esp-setup" bookmark="h_internallinks">internal links</esp:link>.</p>

<p>Each page is referenced in the <esp:link page="esp-setup" bookmark="h_sitestructure">site structure</esp:link>, i.e., in <code>structure.xml</code>, using its file name (e.g., <code>assurbanipal.xml</code>).  Using the wrong name, such as the page id, is a common reason for stage 1 errors when the code is processed.  Keep file names and folder names short and memorable as they are used to create the site’s URL structure.</p>




<esp:author first-names="Ruth" last-name="Horry"/>
<esp:author first-names="Eleanor" last-name="Robson"/>
<esp:content-last-modified/>
<esp:email address="osc@oracc.org"/>


</body></html></esp:page>
