<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0" xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:xh="http://www.w3.org/1999/xhtml" xmlns:xpd="http://oracc.org/ns/xpd/1.0">
  <esp:name>CBD2</esp:name><esp:title>CBD version 2</esp:title>
  <html><head/>
  <body>
    
<p>This page documents 2022's revised Oracc Corpus-Based Dictionary
(CBD) format code-named CBD2.  This revision corresponds to the
implementation of a new parser for Oracc glossaries (which have the
CBD type).  In the XML version of CBD2 the namespace is
<code>http://oracc.org/ns/cbd/2.0</code>.</p>

<p>Although CBD2 is very largely upwardly compatible with CBD1, there
are some important differences between CBD1
(<code>http://oracc.org/ns/cbd/1.0</code>) and CBD2.  One is that in
CBD2 the order of many elements is enforced by the validator.  This
ensures that different glossaries will be structured similarly making
them easier for users to get used to and read quickly.  The other is
greater extensibility--the addition of commands for including
additional files, referencing external URIs, and providing narrative
discussion as well as the data-focussed elements of CBD1.  Details and
notes on other CBD2 features are included throughout this page.</p>

<p>Most users will interact most of the time with the simple
text-based format of Oracc glossaries, the <code>.glo</code> file, and
the primary purpose of this page is to document the <code>.glo</code>
version of CBD2.  The XML derivatives involve some data normalization,
augmentation with additional data, and integration of statistics from
the corpus.  These matters are not dealt with here.</p>

<p>There are also two grammars of CBD2 are available: an XML schema
written in Relax NG's rnc format; and a context-free grammar for the C
language glossary processor, <code>gx</code>, which is written for the
Bison parser generator.  The processor <code>gx</code> reads CBD2
glossaries in the text-format and, amongst other things, exports the
XML version, validating the output against the XML schema as it does
so.  Links to these resources are at the very bottom of this page.</p>

<esp:h>CBD2 Overview</esp:h>

<p>CBD2 glossary files consist of a header followed by zero or more
entries.  An entry is structured as a sequence of blocks.  The blocks,
and the common tags which belong to them, are:</p>

<dl>
  <dt>Entry block</dt>
  <dd>@entry @alias @parts</dd>
  <dt>Language block</dt>
  <dd>@bases @form</dd>
  <dt>Senses block</dt>
  <dd>@sense</dd>
  <dt>Meta block</dt>
  <dd>@bib @equiv @inote @isslp @pleiades</dd>
</dl>

<p>In CBD1, the information covered by the meta block could only be
associated with an entry.  In CBD2 there is provision for including a
meta block for each sense.  Another major addition in CBD2 is support
for internationalization as described at the bottom of this page.</p>

<h2>Definitions</h2>

<h3>Signature Terminology</h3>

<p>CBD1 and CBD2 both use the terminology of Oracc signatures as
described in <esp:link url="/doc/help/lemmatising/signatures/">the
lemmatisation page on signatures</esp:link>.</p>

<h3>CGP</h3>

<p>We use the abbreviation <code>CGP</code> for a CF-GW-POS
specification of the form <code>a[water]N</code> or <code>a [water]
N</code>.  We refer to the former format as "tight" and the latter as
"loose"--in practice, all software that works with glossaries should
understand "tight" and "loose" formats interchangeably, but in
principle some contexts prescribe that the CGP be in either tight or
loose format.</p>

<p>A CGP may have spaces in the CF portion, e.g., <code
class="cookbook">ki a≈ã [love] V/t</code>.  These entries are called
"compound entries".</p>

<h3>CGSPE</h3>

<p>We also use, less often, the abbreviation <code>CGSPE</code> for
CF-GW-SENSE-POS-EPOS. (<code>a[arm//strength]N'N</code>). There is no
loose format for this as it is really a minimal signature.</p>

<h3>#-line Comments</h3>

<p>A line beginning with <code>#</code> is a comment and is stored but
ignored by the CBD2 processor. #-lines like this can occur anywhere
within an entry, but not before or between entries or after the last
entry.  If the processor output is another .glo file comments that
precede the following @-line will be output before the @-line but
comments are not emitted when producing XML or other formats besides
.glo files.</p>

<h3>Files and URIs</h3>

<p>There are several places in a CBD2 glossary where the content can
or must be expressed as an included file or a referenced URI.  Files
and URIs may not contain spaces.  The following file-or-url rules apply
to these cases:</p>

<ol>
  <li>When the content must be file, the filename is unmarked, e.g.,
  <code>@proplist props.txt</code></li>
  <li>When the content must be a file or a URI, a filename is
  unmarked, a URI is indicated by <code>@&lt;...@></code>.  The URI may
  be followed by a space and some text, in which case the text is used
  as the highlighted URI text in the output, e.g.,
  <code>@&lt;http://oracc.org/amgg/listofdeities/enki/ the AMGG page
  about Enki@></code>.</li>
  <li>When the content may be text, or a file, or a URI, a file or a
  URI must be marked using the <code>@&lt;...@></code> convention: if
  there is any ambiguity about whether the text in <code>@&lt;...@></code>
  is a filename or a URI, the URI protocol for files,
  <code>file://</code>, must be used.</li>
</ol>

<h2>The Header</h2>

<p>The common tags in the header are: <code>@project @lang
@name</code>.  In addition, the header may specify the target language
for <code>@sense</code> elements (<code>@translang</code>, which
defaults to <code>en</code>, English); describe the CBD version with
<code>@cbd</code>, and reference one or more configuration files for
the properties and relations mechanisms: <code>@proplist
@relators</code>.</p>

<p>In the following list, and this document generally, common tags are
described before less common tags.</p>

<dl>
  <dt>@project</dt>
  <dd>The name of the project this glossary belongs to.</dd>
  <dt>@lang</dt>
  <dd>The language for which this is a glossary, i.e., the language of
  the entry headwords.</dd>
  <dt>@name</dt>
  <dd>The name is an informal name for the glossary, usually trivially
  constructed from the project and lang, e.g.,
  <code>epsd2/sux</code>.</dd>
  <dt>@translang</dt>
  <dd>The language of translations in the glossary. Default <code>en</code>.</dd>
  <dt>@cbd</dt>
  <dd>The CBD version: presently only 1.0 and 2.0 are recognized.  Default is 1.0.</dd>
  <dt>@proplist</dt>
  <dd>The value must be the name of a file containing configuration
  information for the Properties mechansism; see <esp:link
  url="/doc/help/glossaries/properties/">the properties
  page</esp:link>. May be given more than once.</dd>
  <dt>@relators</dt>
  <dd>The value must be a file or URI giving configuration information
  for the Relations mechanism; [[not yet implemented]]. May be given
  more than once.</dd>
  <dt>@i18n</dt>
  <dd>A list of languages that can be used in the i18n ltags--see the
  discussion at the end of this page.</dd>
</dl>

<p>In the header, <code>@project @lang @name</code> are required and
must occur first and in that order; <code>@cbd @i18n @proplist
@relators @translang</code> must come after the required tags and may
be in any order.</p>

<h2>Entry Block</h2>

<h3>Common Entry Tags</h3>

<p>The entry block is the first part of an entry. An entry begins with
<code>@entry</code> and ends with <code>@end entry</code>.  In
addition, the entry block may contain one or more <code>@alias</code>
tags which give alternate names for the entry.  If the
<code>@entry</code> is a compound, the entry block must also contain
one or more <code>@parts</code> elements.</p>

<h3>Rarer Entry Tags</h3>

<p>An entry block may contain a variable tag which gives a DCF, or
<code>Dialect CF</code>--the variable part of this is that a DCF
consists only of capital letters, e.g., <code>@NA</code>, or
<code>@EG</code>.</p>

<p>There are also CBD Edit constructs that are associated with
<code>@entry</code> but use of these is presently restricted to
ePSD.</p>

<h3>Entry Block Details</h3>

<dl>
  <dt>@entry CGP</dt>
  <dd>An @entry tag is followed by a CGP which must be unique in the
  glossary. The CGP must be given in the loose format.  An @entry may
  be immediately followed by an asterisk (<code>@entry*</code>) to
  indicate that a compound entry (one which has multiple CFs separated
  by spaces) is a phrasal usage rather than a compound verb.  For the
  Sumerian language the distinction is between a compound whose
  semantics are the sum of the parts as opposed to a compound whose
  semantics involve a degree of incorporation or opacity relative to
  the parts.</dd>
  <dt>@alias CGP</dt>
  <dd>An @alias tag is followed by a CGP which may be in either loose
  or tight formats.  The CGP gives an alternate name for the @entry;
  it is not required to exist as a separate entry in the glossary
  because one of the uses of aliases is for the glossary building
  system to include entries from other projects which may use
  different names for words (e.g., Ninurtak[1]DN or
  Ninurta[1]DN).</dd>
  <dt>@parts CGP CGP ...</dt>
  <dd>For compound entries or phrases, one or more @parts entries must
  be given. Each @parts entry is a ordered list of the words (given as
  tight CGPs) that can constitute the phrasal entry.  See the
  <esp:link url="/doc/help/glossaries/psus/">page on PSUs</esp:link>
  for further discussion.  An upcoming extension of CBD2 will support
  CGSPEs in @parts rather than simple CGPs.</dd>
  <dt>@[DCF-specification] CF</dt>
  <dd>Oracc glossaries use narrowly defined conventions for CFs.
  Rather than allow different glossaries to use, for example, Old
  Babylonian Akkadian headwords, the glossary must be constructed
  using Oracc's Conventional Akkadian, but Dialect Citation Forms
  (DCFs) can be used to display the headword in the variant form
  online or in print. For example, <code>@entry kalbu [dog] N</code>
  might have a DCF <code>@OB kalbum</code>.  Note that only the CF is
  given with a DCF.</dd>
  <dt>@disc</dt>
  <dd>@disc enables glossaries to contain discussions of words and
  senses, or to include files or links with such discussions.  The allowed values of @disc are:
  <ul>
    <li>FILE: the FILE is included in the glossary.  If the filename
    ends in <code>.txt</code> or <code>.otf</code>, the file's
    contents are parsed exactly as though they were a part of the
    glossary being processed.  If the filename ends in
    <code>.xml</code>, <code>.html</code>, or <code>.xhtml</code>, the
    contents must be well-formed XML conforming to the CBD2 or XHTML
    schema.  For XHTML the content must consist at the outer level of
    a single <code>&lt;div> ... &lt;/div></code> element. The contents
    are physically included as a block element which is a child of the
    current <code>&lt;disc></code> element in the XML output of the
    glossary.</li> <li>URI: the URI must use the
    <code>@&lt;...@></code> convention, and is replaced in the
    glossary with a link to the resource.</li> <li>TEXT: the text
    content of @disc is currently plain text, but in future it will
    support inline styled text as in <esp:link
    url="/doc/help/convertingatf/otf/">Oracc's OTF
    specification</esp:link> as well as the inclusion of files in
    XHTML and ESP2 formats.</li> </ul></dd>
  <dt>Edit Codes</dt>
  <dd>This section is provided for completeness and can be ignored by
  most users. The edit codes are used by tools which create the
  <esp:link url="/epsd2/oid-history.html">ePSD OID history
  page</esp:link>. An @entry can be preceded by <code>+</code> or
  <code>-</code> meaning that the entry should be added or deleted.
  If the <code>-</code> form is used, there must be a <code>@why</code>
  element immediately after the @entry of the form <code>@why this gives a
  reason for deletion</code>. An @entry can also be followed by an
  entry modifier code.  The single <code>&gt;</code> indicates that
  the entry should be renamed to the CGP after the <code>&gt;</code>.
  The double <code>&gt;&gt;</code> indicates that the entry should be
  merged with the CGP after the <code>&gt;&gt;</code>.</dd>
</dl>

<h2>Language Block</h2>

<p>The language block normally contains at least one or more @form
lines.  In agglutinative languages, like Sumerian and Urartian, it
also includes a @bases entry.</p>

<p>Less common constituents of the language block are @allow, @phon,
@root, and @stems.</p>

<h3>@bases</h3>

<p>It's easiest to begin the discussion of the @bases tag with an example:</p>

<pre class="cookbook">
  @bases ≈ãar (gar); ≈ãa‚ÇÇ-≈ãa‚ÇÇ (ga‚ÇÇ-ga‚ÇÇ); %es mar
</pre>

<p>The @bases value is a structured plain text field consisting of a
sequence of base specifications separated by semicolons.</p>

<p>Each base specification may consist of two parts: the primary base data
and the alternate base data. A primary base consists of an optional
language tag followed by a single base.  Alternate bases are given in
parentheses after the primary base, with commas separating the
alternate bases.</p>

<p>In the example <code class="cookbook">≈ãar</code>, <code
class="cookbook">≈ãa‚ÇÇ-≈ãa‚ÇÇ</code>, and <code class="cookbook">mar</code>
are primary bases. The primary base <code class="cookbook">≈ãar</code>
has an alternate base <code class="cookbook">gar</code> in the same way
as <code class="cookbook">≈ãa‚ÇÇ-≈ãa‚ÇÇ</code> has an alternate base <code
class="cookbook">ga‚ÇÇ-ga‚ÇÇ</code>.  There is also an Emesal primary base,
<code class="cookbook">mar</code> marked with the ATF language switch
<code class="cookbook">%es</code>.</p>

<p>Bases in Sumero-Akkadian Cuneiform (script code 020) <em>must</em>
conform to the GDL specification.  Every base is validated for form
(effectively using the ATF checker) and for content (using the
<esp:link url="/ogsl">Oracc Global Sign List</esp:link>).</p>

<h4>Special features in @bases</h4>

<p>There are several special features used in @bases commands which
allow more precise description of the nature of certain kinds of
bases:</p>

<ul>
<li>The centered dot, ¬∑, means that a single grapheme writes a base
component that is followed by a non-base component, e.g., ar[praise],
has a base <code>a-r¬∑e</code></li>
<li>The degree symbol, ¬∞, means that a single grapheme writes a
non-base component followed by a base component, e.g., e[speak] has
base writings like <code>m¬∞e</code>.</li>
<li>A minus symbol, -, is allowed as the first character of a
determinative to indicate that it is a semantic determinative that is
not in the list of usual suspects for semantic determinatives. An
example is the use of <code>{e}</code> to indicate leather objects.
In ATF transliterations this is usually expressed as a simple
<code>{e}</code>, but in the @bases specification ePSD uses
<code>{-e}</code> to provide a persistent marker that this is not to
be taken as a phonetic determinative.  This in turn allows validation
to warn if probable phonetic determinatives are not properly marked
with +, as in <code>banda‚ÇÉ{+da}</code>.</li>
</ul>

<h4>Validation of @bases</h4>

<p>Several forms of validation are performed on bases by converting
each primary and alternate base to a signature--a sequence of OGSL
sign IDs. Primary bases must normally be unique; alternate bases must
be a valid different transliteration of the primary base (i.e., they
must resolve to the same sign signature as the primary base); and the bases
in @form entries must be present in the @bases and must be a primary
base.  Additional technical rules regarding transliteration are also
enforced but are not detailed here.</p>

<p>Occasionally a sign or sign sequence has more than one allowable
primary transliteration and in these cases the @allow tag must be used
to permit the duplication.  Each @allow tag specifies a pair of
allowed primary equivalents; multiple @allow commands can be given if
necessary. The @allow must come before @bases. Here is an example from ePSD:</p>

<pre class="cookbook">
@entry e [speak] V/t
@allow b¬∞e‚Çá = n¬∞e
@bases b¬∞e‚ÇÇ (be‚ÇÇ); b¬∞e‚ÇÑ; b¬∞e‚Çá; m¬∞e; n¬∞e
</pre>


<h3>@form</h3>

<p>The <code>@form</code> tag associates language data relevant to an
instance of a word to the spelling of the word-form.</p>

<h4>FORM</h4>

<p>The first element, FORM, is always a written form as it might occur
in the corpus but without any half, square, angle or round
brackets.</p>

<p>For Sumerian it is an error for two FORMs in the same entry to be
identical; to code forms which are written the same but have different
possible morphological interpretations it is necessary to use a
disambiguation string consisting of a backslash+disambiguator (e.g.,
<code>\ak</code>). Thus an entry might contain:</p>

<pre class="cookbook">
  @form a-a    /a #~,a
  @form a-a\ak /a #~,ak
</pre>

<h4>Additional @form Fields</h4>

<p>Following the written form various elements may occur depending in
part on the language of the corpus. These elements are always marked
by one or more field-code characters which indicate the type of the
element. No space is allowed between the type character and the data
element.</p>

<p>In the description below the elements after the orthographic form
(FORM) are listed in the order in which they must be specified.  Each
of the data items is a "word"--everything from the field-code to the
next space or end-of-line is the content of the field.  While some of
the fields do have internal structure, that structure is not dealt
with in this document.</p>

<dl>

<dt>% = LANG</dt>
<dd>If no LANG is given the @form's language defaults to the
glossary language.</dd>

<dt>@ = RWS</dt>
<dd>The RWS, Register or Writing System, for the form.  This is rarely
used in glossaries and may safely be ignored by most users.</dd>
  
<dt>/ = BASE</dt>
<dd>The BASE utilized in a Sumerian writing. This must match a
base given in the <code>@bases</code> part of the entry.</dd>

<dt>* = STEM</dt>
<dd>The STEM, which may be a form of the BASE in Sumerian, or a
notation such as D, ≈†, N, in Akkadian, or possibly other
conventions for other languages.</dd>

<dt>+ = CONT</dt>
<dd>The Sumerian grapheme following the base, used only when
that grapheme is the continuation of the end of the BASE, e.g.,
<code>-ma</code> in <code>inim-ma</code>.  The deconstruction of
the grapheme gives the consonant which continues the grapheme
followed by the vowel which is normally a morpheme or morpheme
constituent.  The format is <code>+-ma=m.a</code>, where
<code>ma</code> is the continuation grapheme and
<code>m.a</code> is the decomposition.</dd>

<dt># = MORPH</dt>
<dd>The morphology string for the writing.</dd>

<dt>## = MORPH2</dt>
<dd>The second morphology string for the writing.</dd>

<dt>$ = NORM</dt>
<dd>The normalized version of the writing. This varies by
language: in Akkadian, for example, it is the transcription of
the word-form, without hyphens and determinatives and with
accents. This is not used in the source version of Sumerian
glossaries because it can be computed from the morphology (see
below).</dd>

</dl>      

<h4>COFs--Compound Orthographic Forms</h4>

<p><em>NOTE:</em> This passage describes COFs as modified for
CBD2--this differs slightly from the rules for CBD1 COFs which are
<esp:link url="/doc/help/glossaries/cofs/">described in this
page</esp:link>.</p>

<p>Although the entire COF does not get its own glossary entry, every
word in a COF must contain a <code>@form</code> entry for the
spelling.  In this <code>@form</code> entry, the normalization which
corresponds to the glossary <code>@entry</code> is called the primary
component, and is given without parentheses.  The other words, the
secondary components, have their appropriate normalization given in
parentheses:</p>

<pre class="cookbook">
@entry ina [in] PRP
@form ip-pa-ni-≈°u‚ÇÇ $ina $(pƒÅni≈°u)
@form ip-pa-ni-≈°u‚ÇÇ-nu $ina $(pƒÅni≈°unu)
@form ...
@sense PRP ina
@sense ...
@end entry

...

entry pƒÅnu [front] N
@form ip-pa-ni-≈°u‚ÇÇ $(ina) $pƒÅni≈°u
@form ip-pa-ni-≈°u‚ÇÇ-nu $(ina) $pƒÅni≈°unu
@form ...
@sense N front
@end entry
</pre>

<p>COFs may contain more than two elements, and the same principles apply.</p>

<h5>Sumerian COFs</h5>

<p>COFs require a little extra care in Sumerian, because Sumerian
<code>@form</code> entries also have BASE, MORPH and perhaps other
additional fields.  Further, Sumerian glossaries do not contain NORM
fields directly, because they are computed from the MORPH.</p>

<p>For simplicity of parsing, the rules with Sumerian COFs are as
follows:</p>
<ul>
<li>NORM must be given explicitly; simply use the value of MORPH and
replace the <code>~</code> (tilde) component with the citation
form;</li>
<li>all NORMs must be given consecutively, at the <em>end</em> of the
@form, as with other CBD2 @form lines</li>
<li>BASE should be specified using the centre-dot to indicate that
what precedes the centre-dot is part of the base, and the degree
symbol to indicate that what follows the degree symbol is part of the
base.  The two symbols may be combined where several words are written
using a COF.  The BASE should be included in the <code>@bases</code>
line.</li>
</ul>

<p>Here is a real life example (edited for clarity), in which the sign
<code>u≈°u‚ÇÇ</code> is used to write <code>u‚ÇÑ ≈°u‚ÇÇ</code>:</p>

<pre class="cookbook">
@entry ≈°u≈° [cover] V/t
@bases su≈°‚ÇÇ; u¬∞≈°u‚ÇÇ
@form   u≈°u‚ÇÇ /u¬∞≈°u‚ÇÇ #~ $(ud) $≈°u≈°
@sense V/t to cover, to spread over
@end entry

@entry ud [sun] N
@bases ud; u¬∑≈°u‚ÇÇ
@form   u≈°u‚ÇÇ  /u¬∑≈°u‚ÇÇ #~ $ud $(≈°u≈°)
@sense N sun
@end entry</pre>

<h5>Cross-glossary COFs</h5>

<p>COFs whose components are in different glossaries may occur when a
COF combines a common noun with a proper noun.  No special treatment
is needed for this case, but the relevant <code>@form</code> lines do
have to be present for each component just as they do when the
components are in the same glossary.</p>

<p>Thus, in <code>akk.glo</code> one would have:</p>

<pre class="cookbook">
@entry kab≈´tu [(animal) dung] N
@form {na‚ÇÑ}≈†URIM.{d}GU‚ÇÑ $kab≈´t $(≈†eri≈°)
...
</pre>

<p>And in the proper noun glossary, <code>qpn.glo</code>, the relevant
lines under ≈†eri≈° is:</p>

<pre class="cookbook">
@entry ≈†eri≈° [1] DN
@form {na‚ÇÑ}≈†URIM.{d}GU‚ÇÑ $(kab≈´t) $≈†eri≈°
...
</pre>

<h4>PSUs--Phrasal Semantic Units</h4>

<p>The <code>@form</code> lines of PSUs also have some special
characteristics.  One is that the first element of a <code>@form</code>,
the written form, may contain multiple words: in this case they are
joined by underscores.  The other is that they may only contain NORM
entries in addition to the written form, and each of the NORMs is
prefixed by its own <code>$</code>-sign:</p>

<pre class="cookbook">
@form ina_pa-ni-≈°u‚ÇÇ-nu_a-da-gal $ina $pƒÅni≈°unu $adaggal
@form ina_pa-ni-≈°u‚ÇÇ-nu_i-da-gal $ina $pƒÅni≈°unu $idaggal
</pre>

<p>COFs in the written forms of PSUs are straightforward when the
entire PSU is written with a single COF:</p>

<pre class="cookbook">
@form im-muh-hi $ina $muhhi
</pre>

<p>When the writing mixes a COF with other constituents, however, it
is necessary to declare how many of the NORMs of the
<code>@form</code> line are used up by the COF.  This is done by
adding the special sequence <code>_0</code> (underscore followed by
the digit zero) for each COF-constituent after the first:</p>

<pre class="cookbook">
@form {na‚ÇÑ}NIR‚ÇÇ.PA_0_i·π£-·π£u-ri $hulƒÅl $kappi $i·π£·π£≈´ri
</pre>

<h3>Rarer Language Tags</h3>

<dl>
  <dt>@allow</dt>
  <dd>See above in the discussion of @bases.</dd>
  <dt>@phon</dt>
  <dd>A text field which gives the phonology of a word. No validation
  is done on the content.</dd>
  <dt>@root</dt>
  <dd>A text field which gives the root of a word. No validation is
  done on the content.  In glossaries that use the concept of root,
  the BASE field of forms can be used to specify the root of a given
  form if necessary.</dd>
  <dt>@stems</dt>
  <dd>A text field which declares the known values for STEM in the
  @form lines for the @entry.  This is stored but no further action is
  presently taken with it.</dd>
</dl>

<h2>Senses Block</h2>

<p>The senses block is relatively simple.  In the normal case, it
consists of a series of series of <code>@sense</code> lines, followed
by an optional <code>@disc</code> tag.</p>

<h3>@sense Lines</h3>

<p>Sense lines consist of @sense followed by at least two components:
a part-of-speech, POS, and a meaning, MNG. Between @sense and POS
there may be a sense ID, SID, an outline key, SOK, and a sense
guide-word, SGW.</p>

<p>The optional @sense line components each has a distinctive prefix
character which is not part of the component's value.</p>

<dl>
  <dt>#SID</dt>
  <dd>An SID must begin with the hash or pound sign, '#'; this is
  discarded before storing the SID. The intention of this field is to
  support cross-referencing discussions of senses.  The ID must be a
  legal XML:ID, so it is easiest to construct IDs from an initial
  letter followed by letters and digits.  The technical specication
  for an XML:ID NCName <esp:link
  url="https://www.w3.org/TR/xml-names11/#NT-NCName">can be found on
  the WWW website.</esp:link></dd>
  <dt>.SOK</dt>
  <dd>An SOK must begin with a dot or period, '.'; this is discarded
  before storing the SOK.  The intention of this field is to support
  labelling an ordered set of senses, e.g., with 1., 1.1, 1.2,
  etc. The CBD2 tools do not currently utilize it, but they do store
  it and include it in outputs so downstream tools are able to utilize
  this.</dd>
  <dt>[SGW]</dt>
  <dd>An SGW must be placed in square brackets, as with a CGP guide
  word--the square brackets are discarded before storing the SGW. The
  intention of this field is to support giving a stable human-readable
  key which relates to the sense.  Best practice with SGW is to ensure
  that they are unique within senses of the entry.</dd>
</dl>

<p>Here are example senses from the CBD2 test data:</p>
<pre class="cookbook">
@entry a [water] N
@sense N water
@sense .1 N water
@sense #1 N water
@sense #1 .1 N water
@sense #1 .1 [water] N water
</pre>

<h3>Senses with Meta Blocks</h3>

<p>By default, an @entry has one meta block, after the sense block,
and belonging to the entry as a whole. A new feature in CBD2 allows
meta blocks to belong to senses.  In order to use this feature the
senses block must be wrapped with <code>@senses</code> before the
first @sense line and <code>@end senses</code> at the end of the
senses, after any <code>@disc</code> belonging to the last sense.
This allows a further meta block to be given as well, after <code>@end
senses</code>, which would then belong to the entry.</p>

<pre class="cookbook">
@senses
@sense N water
@note This sense is dubious.
@end senses
</pre>

<h3>Edit conventions</h3>

<p>It is also permitted to use the editing conventions with @sense,
but this is not widely done (see the discussion of editing conventions
with @entry above).  Used with @sense, the <code>&gt;</code> and
<code>&gt;&gt;</code> codes are followed by a POS and a MNG with no
optional sense fields allowed:</p>

<pre class="cookbook">
+@sense N water
-@sense N water
@sense N water
> V/t to water
@sense N water
>> V/t to water
</pre>

<h2>Meta Block</h2>

<p>The meta block is a collection of adjunct information relevant to
entries or senses.  The tags in a meta block may be in any order. All
of meta block tags can occur zero or more times.  They are listed here
in alphabetical order rather than order of importance.</p>

<dl>
  <dt>@bib</dt>
  <dd>Bibliography; no validation or imposed structure.</dd>
  <dt>@collo</dt>
  <dd>Collocations; see <esp:link
  url="/doc/help/glossaries/collo/">the @collo
  documentation</esp:link>.</dd>
  <dt>@equiv</dt>
  <dd>Equivalents; the first item must be a language given with
  percent-sign, e.g., <code>%akk</code>; the rest of the line is a
  reference to a word.  These may be single tokens or CGPs.</dd>
  <dt>@inote</dt>
  <dd>Free text internal note; these will not be displayed but will be
  included in outputs not directly intended for display.</dd>
  <dt>@isslp</dt>
  <dd>An ePSD-specific tag indicating bibliography of particular
  (though sometimes now historical) importance.  Not presently
  validated, the formal structure is a four-digit year (possibly with
  a range, e.g., <code>2020</code> or <code>1998-2000</code>, an
  author, a bibliographic abbreviation, and a locator in the published
  work.</dd>
  <dt>@note</dt>
  <dd>Free text note which should be displayed; a future version will
  support <esp:link url="/doc/help/convertingatf/otf/">OTF styled
  inline text</esp:link> in this element.</dd>
  <dt>@oid</dt>
  <dd>An OID for the word or sense; these should be added
  programmatically and not modified by users.</dd>
  <dt>@pl_coord, @pl_id, @pl_alias</dt>
  <dd>Pleiades support is provided using these three tags which must
  occur in order. @pl_alias may occur zero or more times.</dd>
  <dt>@prop</dt>
  <dd>A property of the entry or sense; see <esp:link
  url="/doc/help/glossaries/properties/">the properties
  page</esp:link>.</dd>
</dl>

<h2>More Glossary Features</h2>

<h3>I18N (Internationalization)</h3>

<p>A new feature in CBD2 is support of internationalization of
glossaries with multiple translation languages (i18n). The initial
design supports translating guide words (@gwl); senses (@sensel);
discussions (@discl); and notes (@notel).  As a shorthand these tags
are referred to as ltags, or language-tags. The initial implementation
could be extended based on experience with using the i18n support.</p>

<p>A header tag, @i18n, gives the languages which are allowed in the
ltags, as <code class="cookbook">@i18n ar fr</code></p>

<p>The ltags all start with the language, including a %-sign, then a
space, then the content.  They may occur as follows:</p>

<dl>
  <dt>@gwl</dt>
  <dd>The @gwl tags must occur immediately after @entry, even before any edit codes.</dd>
  <dt>@sensel</dt>
  <dd>The @sensel tags must occur immediately after the @sense to which they correspond.</dd>
  <dt>@discl</dt>
  <dd>The @discl tags must occur immediately after the @disc to which they correspond.</dd>
  <dt>@notel</dt>
  <dd>The @notel tags must occur immediately after the @note to which they correspond.</dd>
</dl>

<p>A contrived example:</p>

<pre class="cookbook">
  @project epsd2
  @lang sux
  @name epsd2/lang
  @i18n fr

  @entry ur [dog] N
  @gwl %fr chien
  @sense N dog
  @sensel %fr chien
  @disc I prefer cats.
  @discl %fr Moi, je pr√©f√®re les chats.
  @note We expect a note here.
  @notel %fr Ici on attend une note.
  @end entry
</pre>
<h3>Relationships Between Words</h3>

<p>CBD2 includes a mechanism for specifying relationships between
words. The implementation has not yet been applied widely and as a
result may change over time to accommodate additional needs.  The
examples given here are indicative rather than being drawn from actual
glossaries.</p>

<p>A header tag, <code>@relators</code>, can be given in the header
(possibly multiple times).  The value is a file name.</p>

<p>The <code>@rel</code> tag is part of the meta block (meaning it can
apply to entire entries or just to a specific sense) and may be used
multiple times to express multiple relationships.  Relationships have
the following types:</p>

<dl>
  <dt>Nyms</dt>
  <dd>Common semantic relations include synonyms, antonymns, homonyms, and others.</dd>
  <dt>Groups</dt>
  <dd>A collection of words according various criteria.  In CBD2 a
  <code>group</code> is by definition unordered.</dd>
  <dt>Complements</dt>
  <dd>A collection of words which complement each other, such as suppletive forms.</dd>
  <dt>Forms</dt>
  <dd>A collection of words which are (by)forms of each other.</dd>
</dl>

<p>Every @rel tag must start with the name of a collection.  For nyms,
the name (the nym-type) must be followed by a list of CGPs or CGSPEs
that the entry or sense relates to in the manner specified by the
type.  For groups and forms no additional argments are required after
the name.  For comps a free text description of the conditions
governing selection of the complementary form among the collection
should be given.</p>

<pre>
  @entry sag [good] V/i
  @rel antonym hulu[bad]V/i
</pre>

<p>Or:</p>

<pre>
  @entry guza [chair] N
  @rel furniture
</pre>

<p>Or:</p>

<pre>
  @entry du [go] V/i
  @rel suppletive.go imperfect singular
</pre>

<p>A special form of @rel consists @rel, a name, and the keyword head.
This is a hint to processors that if they are listing the collection
they should start with the current entry or sense.  To provide an
order for an entire collection use a @sequence tag.</p>

<h4>@sequence</h4>

<p>The tag @sequence (not yet implemented) denotes an ordered
collection of words. These tags must be included in files or URIs
which are included in the glossary header as <code>@relators</code>
and have the form:</p>

<pre class="example">
  @sequence NAME DESCRIPTION = LIST
</pre>

<p>The LIST which begins after the equals sign, <code>=</code>,
consists of CGPs or CGSPEs.  If the ordering of any component is
uncertain a question mark, <code>?</code>, can be placed before the
component.  If the collection is known to be a sequence but few or
none of the relative orderings are known the entire list can be
preceded by a double question mark <code>??</code>.</p>

<p>This facility is particularly intended for metrological terms and
quality designations.</p>

<h3>Lemmatization Ranks</h3>

<p>The <code>@entry</code>, <code>@sense</code>, and
<code>@form</code> tags may be followed by an exclamation mark, e.g.,
<code>@form!</code>, indicating higher lemmatizer priority.</p>

<h2>Differences and Conversion</h2>

<p>A conversion process will be available for migrating from CBD1 to
CBD2 as well as a list of differences. These are still in progress.
The timeline for adoption of CBD2 is loose.  It is intended that it
will be used for the next release of ePSD2 in December 2022: if that
goes well, other Oracc projects will be migrated in 2023.  Projects
will be rebuilt and checked as part of the migration process.</p>

<h2>Technical Information</h2>

<p>There are several parsers and schemas available in the Oracc code repo which may be useful to programmers:</p>

<ul>
  <li>An anaemic Relax NG schema for an XML output which correponds
  closely to the <code>.glo</code> structure, <esp:link
  url="https://github.com/oracc/oracc/blob/master/c/otf/cbd/cbd-gx.rnc">cbd/cbd-gx.rnc</esp:link>.
  This schema does not yet represent the constraints on the content of
  most elements.</li>
  <li>The Bison grammar used by the <code>gx</code> processor when
  parsing glossaries, <esp:link
  url="https://github.com/oracc/oracc/blob/master/c/otf/cbd/grammar.y">cbd/grammar.y</esp:link>.</li>
  <li>The Flex scanner used by the <code>gx</code> processor to
  tokenize glossaries, <esp:link
  url="https://github.com/oracc/oracc/blob/master/c/otf/cbd/scanner.l">cbd/scanner.l</esp:link>.</li>
</ul>

<p>As development of CBD2 and the new CBD2 toolchain continues there
will be further Relax NG grammar variants which define the annotations
and data restructuring that is carried with glossaries.</p> </body>
</html> </esp:page>
