<?xml version="1.0" encoding="utf-8"?>
<esp:page
	xmlns:esp="http://oracc.org/ns/esp/1.0"
	xmlns="http://www.w3.org/1999/xhtml"
>

    <esp:name>Structure tutorial</esp:name>
    <esp:title>ATF Structure Tutorial</esp:title>
<html><head/><body>
    <p class="firstpara">This document gives a tutorial on how to type the
    block structure features of texts in ATF, the ASCII Transliteration
    Format.</p>

<esp:h>Introduction</esp:h>
<p>We provide a simple introduction to typing ATF
texts, describing the more common features first and filling in the
details later.  Before explaining any specifics, here is a simple
typical example of an ATF text:</p>
<pre class="cookbook">
&amp;P555555 = Some Publication 32
@obverse
1. 1(diš) udu ba-ug₇
$ reverse blank
</pre>
<p>This example illustrates the four of the most common types of lines
in an ATF text:</p>
<dl>
<dt>&amp;-lines</dt>
<dd>Every ATF text must start with an <code>&amp;-lines</code>
("and-lines") which normally gives the CDLI P-identifier and should
also have a human-readable name following it after an '=' sign.</dd>
<dt>@-lines</dt>
<dd>Divisions in the text are specified using lines that start with an
<code>@</code> sign ("at-lines").  These are used to indicate object
types, surfaces, divisions and columns.</dd>
<dt>$-lines</dt>
<dd>Descriptive asides concerning the preservation or state of the
text are given using <code>$-lines</code> ("dollar lines").  These
look like ordinary sequences of words but they may be subject to
strict rules.</dd>
<dt>Text lines</dt>
<dd>Lines beginning with non-spaces followed by a period followed by
one or more spaces are lines of text.  The rules for transliteration
are given in the <esp:link page="gdltut">ATF Grapheme
tutorial</esp:link>.</dd>
</dl>

<esp:h>Line-types</esp:h>

<esp:h>#-lines</esp:h>

<p>The other quite common type of line in an ATF file begins with the
hash sign (<code>#</code>).  There are two kinds of #-line: protocols
and comments.</p>

<esp:sh>Protocols</esp:sh>
<p>Protocols are statements which are interpreted or stored by the ATF
processor but are not part of the text edition proper.  Protocols are
all named and may trigger special processing within the ATF
processor.</p>

<p>The details of protocols are beyond the scope of this tutorial; for
now, it is enough to know that they look like this:</p>

<pre class="cookbook">
&amp;P123321 = Some Akkadian Text
#atf: lang akk-x-oldbab
1. i-na AN{+e}
#note: This is a contrived note.</pre>

<p>Most protocols are a single line and do not require
a blank line after them to separate them from a following protocol
(the one exception is <code>#note:</code>).</p>

<p>More information on protocols, what they are, where they are
allowed and the rules about ordering of protocols is available in the
<esp:link page="protocols">protocols manual</esp:link>.</p>



<esp:sh>Comments</esp:sh>

<p>Comments are asides which are not part of the text edition or the
annotation; they are useful for keeping odd bits of information in the
file without it getting in the way of the text edition or
annotation.</p>

<p>Comments are indicated in ATF by one or more lines beginning with
the hash character (<code>#</code>).</p>

<p>Comments look like protocols in that they begin with a hash-sign,
but they may not begin with the sequence hash-name-colon.  Comments
may be included within text transliterations but not before the first
text in a file.  Comments must always follow any protocols which occur
adjacent to them.</p>

<p>A sequence of lines beginning with hash-signs is a multi-line
comment.  To separate multiple comments to the same line use a blank
line in the ATF file.</p>

<pre class="cookbook">
1. a
#a simple comment

2. a
#a longer comment which somewhat artificially extends
#over multiple lines

3. a
#one comment to line 3.

#another comment to line 3.

4. a
#Comments look a bit like protocols but there is no chance of
#confusion: the ATF processor's scanning rules take care of that.

5. a
#lem: a[water]
#note: If you want a comment to appear in the displayed text-edition 
#use the '#note:' protocol instead.

#and note that any comment must follow any other protocol, including
#'#note:'.
</pre>

<p>You can include note marks in the transliteration and after an
<code>#note:</code> by putting the note mark between caret signs
(e.g., <code class="cookbook">^1^</code>).  You can also specify that
a note corresponds to the label of a text line (or a range) by using
the <code>@notelabel{...}</code> notation, e.g., <code
class="cookbook">#note: @notelabel{i 1} A note to column 1 line
1.</code>.</p>

<esp:h><esp:bookmark id="andlines"/>&amp;-lines</esp:h>

<p>&amp;-lines are used to introduce a new text and consist of two
parts: the ID and the name.</p>

<p>For transliterations of exemplars, the ID is a 'P' followed by six
digits, e.g., P123456.  This ID is assigned by CDLI and is the
reference ID of the object in the main CDLI catalog; to get IDs for
objects not in the CDLI catalog send an e-mail to
cdli@cdli.ucla.edu.</p>

<p>The name of the text should be identical with the 'Designation'
field in the CDLI main catalog; the ATF processor detects mismatches
and reports the correct name.  This mechanism is designed to provide a
check that the P-number in the ID actually references the text the
transliterator intends.</p>


<p>In ATF the two parts of an &amp;-line are separated by
space-equals-space, like this:</p>
<pre class="cookbook">
&amp;P000001 = ATU 3, pl. 011, W 6435,a</pre>
<esp:h>@-lines</esp:h>

<p>@-lines are used for structural tags.  Several
kinds of structure may be indicated using this mechanism: physical
structure, e.g., objects, surfaces; manuscript structure, i.e.,
columns; and document structure, e.g., divisions and colophons.  For
clarity, we describe here only the structural features which are
permitted in object transliterations, i.e., texts with an ID beginning
with <code>P</code>.  Documentation of structural conventions for
composite texts is given in the <esp:link page="composite">composites
manual</esp:link>.</p>


<esp:sh>Objects</esp:sh>

<p>The kind of object on which the inscription being transliterated is
written is designated using one of the following tags:</p>

<dl>
<dt><code class="cookbook">@tablet</code></dt>
<dd>The default, and therefore optional; object is a tablet.</dd>
<dt><code class="cookbook">@envelope</code></dt>
<dd>Tablets and envelopes with the same P number can be transliterated
separately using this tag.</dd>
<dt><code class="cookbook">@prism</code></dt>
<dd>Object is a prism.</dd>
<dt><code class="cookbook">@bulla</code></dt>
<dd>Object is a bulla.</dd>
<dt><code class="cookbook">@fragment</code></dt>
<dd>Object is a fragment, with a fragment name (e.g., a letter)
following the tag; may be used more than once to transliterate
multiple fragments of an object, e.g.:
<pre class="cookbook">
&amp;P212121 = Some Fragmentary Object
@fragment a
1. a
@fragment b
1. a</pre></dd>
<dt><code class="cookbook">@object</code></dt>
<dd>The generic object tag which must be followed by the type of the
object, e.g. <code class="cookbook">@object Stone wig</code>.</dd>
</dl>

<esp:sh>Seals</esp:sh>

<p>A transliteration of the text inscribed on a physical seal object
should be handled using the <code>@object</code> tag:</p>

<pre class="cookbook">
&amp;P333444 = Some Seal
@object seal
1. da-da
2. dumu du-du</pre>


<esp:sh>Surfaces</esp:sh>

<p>Surfaces are principally the physical surfaces:</p>

<dl>
<dt><code class="cookbook">@obverse</code>,
    <code class="cookbook">@reverse</code></dt>
<dd>Obverse and reverse.</dd>
<dt><code class="cookbook">@left</code>,
    <code class="cookbook">@right</code>,
    <code class="cookbook">@top</code>,
    <code class="cookbook">@bottom</code></dt>
<dd>Specifiable edges, left right, top and bottom (as seen when
looking at obverse of tablet).</dd>
<dt><code class="cookbook">@face</code></dt>
<dd>Conventional designation for surfaces of a prism; must be followed
by single lowercase letter indicating the face, e.g.:
<pre class="cookbook">
&amp;P123321 = Some Prism
@prism
@face a
1. a
@face b
1. e</pre></dd>
<dt><code class="cookbook">@surface</code></dt>
<dd>Generic surface tag which must be followed by name of surface,
e.g.: <code class="cookbook">@surface shoulder</code>; <code
class="cookbook">@surface side a</code>.</dd>
<dt><code class="cookbook">@edge</code></dt>
<dd>Generic edge tag; may be followed by single lowercase letter
to name the edge similarly to <code>@face</code>.</dd>
</dl>

<esp:sh>Sealings</esp:sh>

<p>A transliteration of a sealing should be handled using the
<code>@seal</code> tag included like a surface after the
transliteration of the object on which the sealing occurs:</p>

<pre class="cookbook">
&amp;P343434 = Some Sealed Tablet
1. a
$ seal 1

@seal 1
1. du-du</pre>

<p>The use of <code>$ seal</code> anticipates the discussion of
$-lines below; this mechanism can be used to indicate which sealings
occur where on an object.</p>
<esp:sh>Columns</esp:sh>

<p>Columns are indicated with the <code>@column</code> tag, which may
be omitted for single-column texts.  Column numbers must be given in
arabic numerals:</p>
<pre class="cookbook">
&amp;P545454 = Some Columnar Text
@column 1
1. a
@column 2
1. e</pre>

<esp:sh>Status</esp:sh>
<p>The status of some of the features indicated with @-lines can be
indicated in a manner similar to that of graphemes; the notation is
intended to be natural and to follow Assyriological conventions:</p>
<pre class="cookbook">
@obverse?</pre>
<p>Meaning: status of obverse/reverse uncertain</p>

<pre class="cookbook">
@reverse!*</pre>
<p>Meaning: collated; reverse correct despite designation in publication</p>

<p>Primes can be used where this makes sense:</p>
<pre class="cookbook">
@face a'

@column 3'
</pre>
<esp:sh>Headings</esp:sh>

<p>Transliterations and composites can both contain headings, which take the form <code>@h&lt;DIGIT></code>, where DIGIT is the outline-level of the heading, normally 1, 2 or 3.</p>

<esp:sh>Milestones</esp:sh>
<p>For technical reasons it is impossible to interweave physical
structure (of the kind described above for transliterated objects) and
document structure (e.g., paragraph divisions).  This limitation is
resolved by recourse to milestones.</p>

<esp:sh>Divisions</esp:sh>

<p>Documentary divisions in a transliterated object are given using
the <code>@m</code> tag, with the milestone type given after an equals
sign and the division type following; an optional division name or
number may follow the division type:</p>

<pre class="cookbook">
@m=division paragraph 1

@m=division colophon
</pre>

<esp:sh>Discourse</esp:sh>

<p>Simple support for discourse elements in administrative and scholarly
texts is provided using shorthands which are also implemented as
milestones.  These shorthands are:</p> 
<ul>
<li><code class="cookbook">@catchline</code></li>
<li><code class="cookbook">@colophon</code></li>
<li><code class="cookbook">@date</code></li>
<li><code class="cookbook">@signatures</code> and 
    <code class="cookbook">@signature</code></li>
<li><code class="cookbook">@summary</code></li>
<li><code class="cookbook">@witnesses</code></li>
</ul>

<p>These milestones must be specified between lines. If you need to mark a
milestone in the middle of a line then you can split the line into two 
(labeled, e.g., a and b) at the milestone.</p>
<pre class="example">
&amp;P787878 = Some Administrative Text
1. 1(diš) udu
2. da-da
3. šu ba-ti
@date
4. u₄ 1-kam
@left
@summary
1. 1(diš) udu
</pre>

<pre class="example">
&amp;P908908 = A Scholarly Text
@colophon
1a. UNUG{ki} 
@date
1b. {iti}AB U₄ 1-KAM₂
2. MU 1.39@v-KAM₂ {m}an-ti-ʾi-ku-su LUGAL 
</pre>
<esp:h>$-lines</esp:h>
<p>$-lines are used to indicate information about the state of the
text or object, or to describe features on the object which are not
part of the transliteration proper.  They come in two flavours: strict
and loose.</p>
<p><strong>Strict</strong> $-lines are subject to the restrictions in
the table below; strict $-lines can be interpreted in their entirety
by the ATF processor and the interpreted information can then be used
by other programs.  Strict $-lines are the best practice.</p>
<p><strong>Loose</strong> $-lines are indicated by putting parentheses
around the contents of the $-line.  This is a facility provided to
enable annotation of features which are not covered by the strict
$-line specification.  If the ATF processor detects that a loose
$-line actually meets the criteria defined for strict $-lines it gives
an advisory notice that the parentheses should be removed.</p>
<p>$-lines and comments are two quite different facilities, but
experience has shown that transliterators can confuse the two.
Comments are for information which does not belong in the
transliteration and description of the text; comments are not
displayed when the text is formatted for display or print.  $-lines
are for information which is integral to an understanding of the
textual data; $-lines are included when the text is displayed or
printed.</p>
<esp:sh>Seal</esp:sh>
<p>A particular use of $-lines is to indicate that a seal is used on
an object; the form is:</p>
<pre class="example">$ seal &lt;N></pre>
<p>Where <code>N</code> is a number indicating which seal is used;
if a transliteration of the seal is also given using the
<code>@seal</code> heading, the number following <code>$ seal</code>
should correspond to the number following <code>@seal</code>.  See the
<esp:link bookmark="sh_seals">example above.</esp:link></p>

<esp:sh>State</esp:sh>
<p>Most $-lines are used to give information about the state of the
object being transliterated.  The conventions for this can be
summarized as follows:</p>
<table class="pretty">
<caption>Summary of Strict $-line Conventions for States</caption>
<thead>
<tr><th>Qualification</th><th>Extent<sup>1</sup></th><th>Scope</th><th>State</th></tr>
</thead>
<tfoot>
<tr><td colspan="5"><sup>1</sup>The extent <code>N</code> may be a
number such as 1 or 5; a <code>RANGE</code> gives two numbers
separated by a hyphen, e.g., 3-5.</td></tr>
<tr><td colspan="5"><sup>2</sup><code>OBJECT</code> is any object
specifier as described above, e.g., tablet, object etc.</td></tr>
<tr><td colspan="5"><sup>3</sup><code>SURFACE</code> is any surface
specifier as described above, e.g., obverse, left etc.</td></tr>
</tfoot>
<tbody>
<tr>
<td>
at least<br/>
at most<br/>
about
</td>
<td>
n<br/>
several<br/>
some<br/>
NUMBER<br/>
RANGE<br/>
rest of<br/>
start of<br/>
beginning of<br/>
middle of<br/>
end of<br/>
</td>
<td>
OBJECT<sup>2</sup><br/>
SURFACE<sup>3</sup><br/>
column<br/>
columns<br/>
line<br/>
lines<br/>
case<br/>
cases<br/>
surface
</td>
<td>
blank<br/>
broken<br/>
effaced<br/>
illegible<br/>
missing<br/>
traces
</td>
</tr>
</tbody>
</table>
<esp:sh>Rulings</esp:sh>
<p>$-lines are also used to indicate noteworthy rulings on the
tablet; ordinary case- or line-ruling should not be indicated with a
$-line, but where a scribe has used a ruling to give additional
information about the document structure this should be noted as:</p>
<pre class="listing">
(single | double | triple)   ruling
</pre>
<esp:sh>Examples</esp:sh>
<p>Strict $-lines look like this:</p>
<pre class="cookbook">
$ 3 lines blank
$ rest of obverse missing
</pre>
<p>A loose $-line looks like this:</p>
<pre class="cookbook">
$ (head of statue broken)
</pre>
<p>A ruling $-line looks like this:</p>
<pre class="cookbook">
$ double ruling
</pre>
<esp:sh>Images</esp:sh>
<p>Inline images can be specified using the form:</p>
<pre class="example">
$ (image N = &lt;text>)
</pre>
<p>Where N is an image number consisting of digits followed by
optional lowercase letters from a to z, and &lt;text> is free text,
giving a label for the image (which is copied through to the XHTML
'alt' attribute on the &lt;img> tag).</p>

<pre class="cookbook">
$ (image 1 = numbered diagram of triangle)
</pre>

<p>At present, the implementation only works for XHTML which is
produced within a project.  The ATF processor constructs a file name
consisting of the text ID and the image's N value, joined by an at
sign (e.g., <code>P123456@1</code>).  The XHTML producer then emits an
<code>&lt;img></code> tag with the <code>src</code> attribute set to
<code>/&lt;PROJECT>/&lt;FILENAME>.png</code>.</p>

<p>Thus, in the present implementation, there must exist an
appropriately named file in the PNG graphics format residing in the
project's <code>images</code> directory.  The implementation is
expected to support a more sophisticated locator mechanism in the
future.</p>
<esp:h>Text Lines</esp:h>
<p>Lines of transliterated text begin with a sequence of non-space
characters followed by a period and a space (these are typically
numbers, but that is not a requirement):</p>
<pre class="cookbook">
1.   a
a+1. e
2'.  i</pre>


<p>In ATF, lines containing only spaces are ignored; lines
beginning with a space are continuation lines and the newline and
leading spaces are dropped by the ATF processor:</p>
<pre class="cookbook">
1. a a a a 
   a a a</pre>


<p>The content of lines is defined principally by the <esp:link page="gdltut">Grapheme Description Language</esp:link>, but there are
some line-related ATF features which are not necessary for many users
and which are dealt with in the <esp:link page="advanced">advanced
documentation</esp:link>.</p>
<esp:author first-names="Steve" last-name="Tinney"/>
<esp:content-last-modified/>
<esp:email address="osc@oracc.org"/>
</body>
</html>
</esp:page>