<?xml version="1.0" encoding="utf-8"?>
<esp:page
	xmlns:esp="http://oracc.org/ns/esp/1.0"
	xmlns="http://www.w3.org/1999/xhtml"
>
<esp:name>Syntax</esp:name>
<esp:title>L2: Signature/Lemmatization Syntax</esp:title>
<html><head/><body>

<p class="firstpara">This document describes extant and planned
elements of the syntax of signatures and the lemmatization
specifications that use them.  There is also an <esp:link
page="signatures">introductory page about signatures</esp:link>.</p>

<p>The forms of signatures and inline lemmatizations proper are
identical as far as core and adjunct fields are concerned.  Signatures
are simply lemmatizations prefixed with a project and a lang/form
pair.</p>

<esp:h>Prefix Fields</esp:h>

<table class="pretty">
<thead>
<tr><th>Key Char</th><th>Field</th></tr>
</thead>
<tbody>
<tr><td><code>@...</code></td><td>Project name</td></tr>
<tr><td><code>%...</code></td><td/></tr>
<tr><td>:...=</td><td>Form (Unicode text, no 'equals' signs)</td></tr>
</tbody>
</table>

<pre class="example">@dcclt%sux-emesal:ma=</pre>

<esp:h>Core Fields</esp:h>

<table class="pretty">
<thead>
<tr><th>Key Char</th><th>Abbrev</th><th>Full Name</th></tr>
</thead>
<tbody>
<tr><td/><td>CF</td><td>Citation Form</td></tr>
<tr><td><code>[...]</code></td><td>GW</td><td>Guide Word</td></tr>
<tr><td><code>//</code></td><td>SENSE</td><td>Sense</td></tr>
<tr><td/><td>POS</td><td>Part of Speech</td></tr>
<tr><td><code>$</code></td><td>NORM</td><td>Normalization</td></tr>
</tbody>
</table>

<esp:h>Adjunct Fields</esp:h>

<table class="pretty">
<thead>
<tr><th>Key Char</th><th>Abbrev</th><th>Full Name</th></tr>
</thead>
<tbody>
<tr><td><code>'</code></td><td>EPOS</td><td>Effective Part of Speech</td></tr>
<tr><td><code>/</code></td><td>BASE</td><td>Word Base</td></tr>
<tr><td><code>+</code></td><td>CONT</td><td>Base Continuation</td></tr>
<tr><td><code>*</code></td><td>STEM</td><td>Word Stem</td></tr>
<tr><td><code>#</code></td><td>M1</td><td>Morphology 1</td></tr>
<tr><td><code>##</code></td><td>M2</td><td>Morphology 2</td></tr>
</tbody>
</table>

<p>Note: augmentation and disambiguation do not need to be handled
explicitly in signatures because they are rewritten as part of the
FORM or M1 fields.</p>

<esp:h>Para-lemma Features</esp:h>

<esp:sh>Properties</esp:sh>

<p>Properties can also be specified on lemmata using the
'$'-notation.  The full form is:</p>

<pre class="example">$PROPERTY=VALUE</pre>

<p>No spaces are allowed.  If 'VALUE' is unique within
the values given in the project's 00lib/properties.xml
then the PROPERTY component is optional giving the
short form:</p>

<esp:ssh>Property Validation</esp:ssh>
<p>Properties can be validated and constrained with control lists.  To
use this facility the project must define the configuration variable
<code>lem-props</code> with value <code>yes</code>, and also have a
properties definition file <code>00lib/lemprops.txt</code>.</p>

<p>The format of the lemprops.txt is a series of lines containing
space-terminated tokens.  In each case, the first token is a property
name and remaining tokens are value-specifications.  If the line
starts with a space or tab, the remaining tokens are additional
value-specifications for the last property given.  Some
value-specifications are special, as defined in the following
table.</p>

<table class="pretty">
<thead>
  <tr><th>Value</th><th>Meaning</th></tr>
</thead>
<tbody>
  <tr><td>*</td><td>VALUES are not controlled; any word-token is allowed as a value</td></tr>
  <tr><td>-</td><td>VALUE is BOOLEAN; if the property name is present, the value is TRUE</td></tr>
  <tr><td>@</td><td>VALUE is a reference; references are resolved when the lemmatization of a text is complete.</td></tr>
  <tr><td>|</td><td>the special VALUE <code>|</code> is reserved for system use and may not occur in lemprops.txt</td></tr>
  <tr><td>VALUES</td><td>space-separated tokens other than the above special values are the control set for the property</td></tr>
</tbody>
</table>

<pre class="example">$VALUE</pre>

<esp:sh>Anchors</esp:sh>

<p>Any lemma can be labeled with an anchor which can be
used as the target of a reference. This can be used
to handle anaphora:</p>

<pre class="example">#lem: ...  Anu-uballit[1]PN @1 ...

#lem: abišu[father] =1</pre>

<p>A simple label consists of the at-sign (<code>@</code>) followed by
digits, but arbitrary labels may be given subject to the constraint
that no label may contain spaces:</p>

<pre class="cookbook">#lem: ...  Anu-uballit[1]PN @mystery-man ...

#lem: abišu[father] =mystery-man
</pre>

<esp:sh>Syntax Hinting</esp:sh>

<esp:sh>Top vs Internal</esp:sh>

<p>Top-level boundaries may be given to mark discourse
(<code>:</code>), sentence (<code>.</code>), clause (<code>;</code>)
and phrase (<code>,</code>) boundaries.</p>

<p>Bracketing is implicit between top-level constituents:</p>

<pre class="example">a b ; c , d e ; f g . h i : j k</pre>

<p>Is identical to:</p>

<pre class="example">( ( (a b) ; (c) , (d e) ; (f g) ) . ( h i ) ) : ( j k )</pre>

<p>To annotate internal phrase structure one can add parentheses
explicitly:</p>

<pre class="example">a b ; c , (d e , f g) , h i .</pre>

<p>Here, <code>(d e , f g)</code> is first parsed as a top-level 
constituent, then recursively parsed.</p>

<esp:sh>Labeling Units</esp:sh>

<p>A unit can always be labelled by giving the label after
its opening parenthesis.  For units with explicit dividers,
the label may be given after the divider:</p>

<pre class="example">(S a b ; (PRP c d)) :DATE e f</pre>

<esp:sh>Conjunction and Modification</esp:sh>

<p><code>+&amp;</code>, <code>+&gt;</code>, <code>+&lt;</code> imply a
phrase boundary, i.e., they are equivalent to <code>+,+&amp;</code>
etc.</p>

<pre class="cookbook">kud[fish]; +&amp; muszen[bird]</pre>

<pre class="cookbook">kud[fish]; tur[small]; +&amp; (muszen[bird]; gal[big])</pre>

<esp:sh>Linksets</esp:sh>

<p>Linksets allow arbitrary collections of words to be collected
as discontinuous units.  These are generally identified by the various
analyzer programs, but we define a mechanism for specifying them
manually to supplement or override the programs.</p>

<p>Linksets can be defined and populated using two notations:</p>

<pre class="example">
 ##TYPE/INDEX[/MEMBER]

 #INDEX/[MEMBER]</pre>

<p>Where INDEX may be a simple integer or a more complex symbol:</p>

<pre class="cookbook">
 ##date/from ... #from ... #from

 ##date/to ... #to ... #to</pre>

<p><code>[MEMBER]</code> in each case enables the lemma(ta) to be
associated with an element in the linkset structure.  Suppose any date
should consist of a year, month and day element.  A date linkset might
then look something like this:</p>

<pre class="example">
 #lem: mu[year] ##date/doc/year; Šulgir[1]RN #doc/year; lugal[king] #doc/year

 #lem: iti[month]; Ubigu[1]MN #doc/month; ud[day]; n #doc/day</pre>

<p>Note that many dates can be parsed successfully by machine, but
this mechanism allows manual tagging of dates that aren't handled by
the machine.</p>

<esp:author first-names="Steve" last-name="Tinney"/>
<esp:content-last-modified/>
<esp:email address="osc@oracc.org"/>


</body></html></esp:page>
