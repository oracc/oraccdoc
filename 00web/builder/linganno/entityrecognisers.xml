<?xml version="1.0" encoding="UTF-8"?>
<esp:page
	xmlns:esp="http://oracc.org/ns/esp/1.0"
	xmlns="http://www.w3.org/1999/xhtml"
>
	<esp:name>Entity recognisers</esp:name>
	<esp:title>PSA: The Person Specification Analyser</esp:title>

	<html>
		<head>
			<meta name="robots" content="noindex,nofollow"/>
		</head>
		<body>
			<p class="firstpara">This document contains a brief explanation of the
  rationale and implementation of one of  Oracc's three entity recognisers: the <!--Dates Specification Analyser (DSA), Names Specification Analyser (NSA), and--> Person Specification
  Analyzer (PSA). It includes schemas for configuration data and
  output.  This document is a work-in-progress; it will certainly
  change as they are implemented.</p>

<esp:h>Definitions</esp:h>

<esp:sh>Person-specs</esp:sh>

<p>Persons are a subclass of Named Entity referring, in Mesopotamian
culture at least, to humans, gods and beings in between.  By
convention, we write PN for Personal Name, with numeric subscripts to
distinguish, e.g., PN1 from PN2.</p>

<p>A Person Specification (person-spec) is a series of words which
identify a specific individual, though the specification may be
indeterminate with respect to identity.  Thus, in Ur III
administrative texts a transaction function such as ŋiri = "via" may
be followed not only by the name of a person, but also by a
professional or functional designation referring to the transactor by
office.  Within certain contexts, then, a person-spec may be an
unadorned functional term.</p>

<esp:sh>Relations</esp:sh>

<p>Besides names and functional designations, a person-spec may include
information on the individual's relatives, most commonly in the form
"PN1 son of PN2", but with the expected range of possible relational
designators.</p>

<p>A person-spec with no relational designators is called a
<code>simple</code> person-spec.  A person-spec with relational
designators is called a <code>complex</code> person-spec.  Such
complex person-specs are actually person-specs which contain
person-specs; these container relationships may be recursive.</p>

<esp:sh>Role and Profession</esp:sh>

<p>A person-spec may also include designations of the individual's
profession or customary function, and/or of the individual's role in a
given transaction.  In such constructs as "PN1 son of PN2, the scribe"
the attribution of the profession to the correct PN may be uncertain.</p>

<esp:sh>Anaphora</esp:sh>

<p>Texts frequently contain relationship information expressed by
anaphora, and these anaphoric references are themselves frequently
discontinuous with respect to the person-spec itself.  Examples of
this include constructs such as "PN1 ... PN2, his father".
Identifying such references, even if incompletely, is a desideratum.</p>

<esp:sh>Context</esp:sh>

<p>Various kinds of discourse context contain information relevant to
person-specs.  These include the syntactic/sentence-frame context
(person-spec's role is buyer/seller, etc.) and object context
(person-spec's actions include sealing document).</p>


<esp:h>Implementation</esp:h>


<esp:sh>Requirements</esp:sh>

<p>The implementation must be:</p>
<ul>
 <li>multilingual;</li>
 <li>generalizable;</li>
 <li>independently layered in terms of token-classification and program
   operation.</li>
</ul>

<p>The input data must be:</p>

<ul>
<li>lemmatized;</li>
<li>morphologically analyzed (anaphora resolution is not attempted
   if morphology is not available);</li>
<li>constructed in the form of an XCL tree.</li>
</ul>

<p>Language configuration data must be:</p>

<ul>
<li>expressed as a well-formed XML file conforming to the PSA
   configuration data schema.</li>
</ul>

<p>Input data which does not meet these contraints can be preprocessed
appropriately.</p>

<esp:sh>Concepts</esp:sh>

<dl>
<dt><esp:bookmark id="Type">Type</esp:bookmark></dt>

<dd>As explained above, there are two types of person-spec: simple and
complex.  A complex person-spec is one which contains further
person-specs, which may themselves be simple or complex, and so
on.</dd>

<dt><esp:bookmark id="Head">Head</esp:bookmark></dt>

<dd>The PN or other designator which is at the top of a person-spec
container hierarchy is referred to as the <code>head</code> of the
person-spec.</dd>

<dt><esp:bookmark id="Properties">Properties</esp:bookmark></dt>

<dd>The information that is part of a person-spec may be thought of in
terms of its <code>properties</code>.  Person-spec properties include
the name(s) of the person, relations such as 'son-of', daughter-of',
and profession/role designations.</dd>

<dt><esp:bookmark id="Operators">Operators</esp:bookmark></dt>

<dd>Relators, profession and role designations may all be viewed as
operators: relators are binary operators, applicable to two
person-specs (normally the preceding and following person-specs).
Profession and role designations are unary operators, applicable to
only one person-spec (normally the preceding one, but in the case of
Ur III transaction markers like ŋiri they may apply to the following
person-spec).</dd>

<dd>As a matter of discursive simplicity, this document tends to talk
in terms of operators being applied to person-specs with the result
that they contribute properties to the person-specs.</dd>

<dt><esp:bookmark id="Direction">Direction</esp:bookmark></dt>

<dd>Unary operators have an application direction, given as
<code>forward</code> or <code>backward</code>.  Operators that are
applied <code>forward</code> contribute properties to the following
person-spec; those which are applied backward contribute properties to
the preceding person-spec.</dd>

<dt><esp:bookmark id="Scope">Scope</esp:bookmark></dt>

<dd>In a simple person-spec the scope is not an issue: the scope is
person-spec.  In complex person-specs, scope is the level at which
designators are applied to a head, and we generalize those levels as
<code>outer</code>, or top-level, and <code>inner</code>, or
lower-level.  Consider the following examples from Sumerian:</dd>

<dd>
<pre class="example">
(0) Dudu dubsar
(1) Dudu dumu Dada dubsar
(2) Dudu dumu Dada dumu Didi
</pre>

</dd>
<dd>In these examples we have both simple and complex person-specs,
with both binary and unary operators.</dd>

<dd>In example (0), the person-spec is simple, and the scope within
which to apply the unary operator <code>dubsar</code>, "scribe", is
clear: it applies to the head of the single person-spec.</dd>

<dd>In example (1), the person-spec is complex.  Several person-specs
are actually involved, which may be partially (and minimally)
bracketed as:</dd>

<dd><pre class="example">
(1') (<sub>1</sub> Dudu dumu (<sub>2</sub> Dada))
</pre></dd>

<dd>It is apparent that the unary operator <code>dubsar</code> could
be applied either at the inner or the outer scope.  Application at the
inner scope yields:</dd>

<dd><pre class="example">
(1'a) (<sub>1</sub> Dudu dumu (<sub>2</sub> Dada dubsar <sub>2</sub>))
</pre></dd>

<dd>Application at the outer scope yields:</dd>

<dd><pre class="example">
(1'b) (<sub>1</sub> Dudu dumu (<sub>2</sub> Dada) dubsar)
</pre></dd>

<dt><esp:bookmark id="Unary_Scope">Unary Scope</esp:bookmark></dt>

<dd>Every unary operator specified in the configuration data must be
given a scope.  The scope may be over-ridden at the instance level by
specifying either the <code>inner</code> or <code>outer</code>
property on the lemmatization of the instance.</dd>

<dd><strong>N.B.: as of 2009-01-09 the facility to over-ride the
default scope by specifying a lemma property is not yet implemented or
documented in the lemmatizer.</strong></dd>

<dt><esp:bookmark id="Binary_Scope">Binary Scope</esp:bookmark></dt>

<dd>Example (2) is provided to illustrate the effect of scope on binary
operators.  Like unary operators, binary operators must have a default
scope defined in the configuration data.  Defining the default scope
of <code>dumu</code> as <code>inner</code> and <code>dubsar</code> as
<code>outer</code> yields:</dd>

<dd>
<pre class="example">
(2') (<sub>1</sub> Dudu dumu (<sub>2</sub> Dada dumu (<sub>3</sub> Didi) <sub>2</sub>) dubsar)
</pre>
</dd>
</dl>
<esp:h>Configuration</esp:h>

<p>The configuration data for the PSA consists of a collection of
property specifications keyed to lemmata and, possibly,
lemma-sequences or patterns.  Each language has its own configuration
block.  The PSA itself is language-agnostic, relying only on the
information which is attached to the lemmata as a result of applying
the configuration data to the input.</p>

<p><strong>N.B.:</strong> In the present schema support for multi-word
PSA tokens, such as Akkadian <code>māru ša</code> is not yet defined.
It is, however, a recognized requirement and the intention is to
address this requirement using the Ngram mechanism.</p>

<esp:h>psa.rnc</esp:h>
<pre class="listing">namespace psa     = "http://oracc.org/ns/psa/1.0"
start     = config

config    = element psa:config { lang* }

lang      = element psa:lang   {
              attribute psa:target-lang { xsd:NMTOKEN },
              confdata* 
	    }

confdata  = lemma | ngram

lemma     = element psa:lemma   { 
              cfgw , 
	      ((binary , prop-prev , prop-next) 
               |(unary , prop-this , direction)) ,
              scope
            }
ngram     = element psa:ngram   { text }

cfgw      = attribute psa:cfgw  { text }
binary    = attribute psa:arity { "binary" }
unary     = attribute psa:arity { "unary" }
direction = attribute psa:dir   { "backward" | "forward" }
scope     = attribute psa:scope { "inner" | " outer" }
prop-next = attribute psa:next  { text }
prop-prev = attribute psa:prev  { text }
prop-this = attribute psa:this  { text }</pre>



<esp:h>Output</esp:h>

<p>The results of running the PSA on an XTF text may appear in several
places:</p>
<ul>
  <li>In the list of XFF structures attached to XCL lemma nodes.
  <p>The PSA may result in the (partial) disambiguation of PN
  instances, resulting in elimination of unnecessary forms from
  ambiguity lists.</p></li>
  <li>In the core attributes of individual XFF instance structures.
  <p>The PSA may result in increased specificity of PN
  identifications, for example, a PN marked as SENSE=0, i.e.,
  unresolved, may be able to recategorized as a specific
  individual.</p></li>
  <li>In the properties of individual XFF instance structures.  
  <p>In the case of person-specs whose head is a PN, unary properties
  attached to person-specs by the PSA are retrofitted into the XCL
  tree as properties on the instance forms.</p></li>
  <li>In the Linkbase belonging to the text.
  <p>Relations and other structures that have more than one member are
  entered as linksets in the Linkbase.  From there they can be
  harvested and integrated into the Corpus-Based Dictionaries.</p>
  </li>
</ul>


		</body>
	</html>

</esp:page>
