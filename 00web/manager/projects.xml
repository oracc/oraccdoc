<?xml version="1.0" encoding="utf-8"?>
<esp:page
	xmlns:esp="http://oracc.org/ns/esp/1.0"
	xmlns="http://www.w3.org/1999/xhtml"
>
<esp:name>Projects</esp:name>
<esp:title>An overview of Oracc projects</esp:title>
<html><head/><body>

<p class="firstpara">The basic unit in the Oracc system is the project.
  This document gives a basic introduction to how projects are
  organized and how to create and work with them.</p>


<p><esp:link bookmark="h_whatisaproject">What is a project?</esp:link> | <esp:link bookmark="h_settingupaproject">Setting up a project</esp:link> | Definitions: <esp:link bookmark="h_portal">Portal</esp:link> | <esp:link bookmark="h_corpus">Corpus</esp:link> | <esp:link bookmark="h_pager">Pager</esp:link> | <esp:link bookmark="h_catalogue">Catalogue</esp:link> | <esp:link bookmark="h_glossaries">Glossaries</esp:link> | <esp:link bookmark="h_textlists">Text Lists</esp:link> | <esp:link bookmark="h_structure">Structure</esp:link> | <esp:link bookmark="h_management">Management</esp:link> | <esp:link bookmark="h_procedures">Procedures</esp:link></p>

<esp:h>What is a Project?</esp:h>

<p>From the user's perspective a project comprises one or two components:</p>
<ul>
<li>a <strong><esp:link bookmark="h_portal">portal</esp:link></strong> is a collection of web pages, perhaps with images and downloads, which describe some aspect of cuneiform culture;</li>
<li>a <strong><esp:link bookmark="h_corpus">corpus</esp:link></strong> is a collection of texts which have glossaries and possibly some pages of explanation.</li>
</ul> 
<p>A project minimally contains a portal but may also contain a corpus that is related to it.</p>

<p>From
the system perspective, there are actually two kinds of projects: main
projects (which we call simply `projects') and subprojects.
Subprojects are a way of dividing up projects for various reasons.
 For instance, the CAMS subproject Ludlul is found in the <code>cams/ludlul/</code> directory.</p>



<esp:sh>Setting up a project</esp:sh>
<p>Projects are the organizational core of the Oracc server.</p>
<ul>
<li>defining a project on the Oracc server is optional; you can work with most of the tools without doing so;</li>
<li>but having a project makes it easy for you to store control lists of graphemes and lemmata, and view your data online even while you are developing it;</li>
<li>a project provides an easy way to present your work online;</li>
<li>email <esp:email address="osc@oracc.org"/> to arrange this.</li>
</ul>


<p>Before we begin, it is useful to explain the fundamentals which are
available to all projects.</p>

<esp:h>Portal</esp:h>

<p>A project has at least one <esp:link page="portals">portal page</esp:link>, which may contain links to the
corpus. The portal website is hosted on the same server as the corpus data, and
 may also be located elsewhere (for instance if required by a funding body).</p>


<p>Files containing editable portal content live in the <code>00web/</code>
directory. Files containing static content, such as images and downloads, live in the <code>00res/</code> directory.</p>


<p>The link to the portal for a project `cams' is:</p>

<pre class="example">
http://oracc.museum.upenn.edu/cams
</pre>

<p>Help on setting up a portal is given here.</p>


<esp:h>Corpus</esp:h>

<p>Most projects relate in some way to a text corpus.  The texts are
entered or converted to the ATF format and may have translations.  The
project management software takes care of turning the ATF sources into
the various formats used for web display and other purposes.</p>


<esp:sh>Working with transliterations</esp:sh>
<p>Transliterations are the core of a corpus.</p>
<ul>
<li>convert legacy data to ATF</li>
<li>add new texts by typing them in ATF</li>
<li>validate your transliterations using the ATF checker</li>
<li>you can optionally use your own control lists for data content like allowable grapheme values and more</li>
</ul>

<esp:sh>Working with translations</esp:sh>
<p>Translations can be integrated into the corpus.</p>
<ul>
<li>Translate the texts or convert legacy translations to ATF.</li>
<li>Publish the corpus to the web with searching or in print with indexes.</li>
</ul>

<p>ATF files containing transliterations and translations are kept in a project's <code>00atf</code> directory on the Oracc server.</p>

<esp:sh>Pager</esp:sh>

<p>The pager is the name given to the web-interface which enables
users to interact with the corpus.  The pager understands how to
present long lists of results in pages, and also how to assemble
metadata, texts and translations into pages displaying individual
texts.</p>

<p>In your web browser you can jump directly to the corpus pager
by using the keyword `corpus' after the project name in the URL.
Compare <esp:link url="http://oracc.org/saao">http://oracc.museum.upenn.edu/saao</esp:link>
and <esp:link url="http://oracc.org/saao/corpus">http://oracc.museum.upenn.edu/saao/corpus</esp:link>.</p>

<esp:sh>Catalogue</esp:sh>

<p>While it may not be obvious, the most fundamental part of any
corpus is the catalogue which provides the text metadata--at the very
least the CDLI ID and a human-readable designation--which provides the
organizational basis for all other components of the project.</p>

<p>The easiest way to provide a catalogue for a corpus is to derive
the project dynamically from the CDLI catalogue.  However, some
projects have special needs and in those cases it is possible to
tailor the catalogue processing software to the required metadata
fields and values.</p>

<esp:sh>Working with P-numbers</esp:sh>
<p>P-numbers are unique identifiers required by the tools. To get P-numbers for you tablets:</p>
<ul>
<li>send a brief catalog of texts to CDLI staff</li>
<li>initially such a catalog might only contain identifying information such as museum and publication numbers and a
few additional fields giving the author and date of the primary
publication and the owner of the objects</li>
<li>information on period, provenience and genre is desirable--and is used by the web-based browse and search tools--but may be added later</li>
<li>further fields are useful but not absolutely required.</li>
</ul>

<p>If a project has its own catalogue, that is kept in the <code>00cat/</code> directory.</p>


<esp:sh>Glossaries</esp:sh>

<p>The ATF format supports lemmatization, which is the process of
adding references to dictionary headwords into the texts.  If a corpus
is lemmatized, it can be used to generate glossaries directly from the
texts with no glossary-editing at all.  Normally, however, the
glossary and text corpus are used together: the glossary is maintained
and may be edited or augmented with bibliography, and the corpus is
synchronized with the glossary so that all of the instances of terms
are instantly reachable from the glossary articles.</p>

<esp:sh>Adding linguistic annotations</esp:sh>
<p>Linguistic annotation makes a corpus more useful.</p>
<ul>
<li>you can add sentence boundaries to the transliterations by simply typing <code>+.</code> in the appropriate places</li>
<li>lemmatization, identifying the word to which each form belongs, is particularly useful</li>
<li>the Oracc tools provide a straightforward procedure for making lists of forms and their lemmata</li>
</ul>

<p>Glossaries are generated from the ATF files when a project is rebuilt. They live in the <code>00lib/</code> directory.</p>



<!-- <esp:sh>Stable URIs</esp:sh>

<p>The effect of a static HTML page for any given text in any given
project is achieved via the following CGI call:</p>

<pre class="example">
http://oracc.museum.upenn.edu/PROJECT/PQXID/html
</pre>

<p>Where <code>PROJECT</code> is the project name and
<code>PQID</code> is the P-, Q- or X-number of the text.  Thus, to
retrieve the HTML version of SAA 01 01, with all SAA styling, the call
would be:</p>

<pre class="cookbook">
http://oracc.museum.upenn.edu/P336297/html
</pre>

<p>This form is suitable for referencing in the
<code>&lt;object&gt;</code> tag.  A typical sample code fragment would
look something like this:</p>

<pre class="cookbook">
 &lt;object type="text/html" 
         data="http://oracc.museum.upenn.edu/saao/saa01/P334164.html"
         style="height: 1350px; width: 600px; display: block;"&gt;
    &lt;p&gt;You are seeing this message because your browser does not 
    support the &lt;object&gt; tag.  The transliteration and 
    translation of this text is available at &lt;a
    href="http://oracc.museum.upenn.edu/saao/saa01/P334164.html"
    class="external" title="Link opens in new 
    window"&gt;http://oracc.museum.upenn.edu/saao/saa01/P334164.html"&lt;/a&gt;&lt;span
class="externallinktext"&gt;
[http://oracc.museum.upenn.edu/saao/saa01/P334164.html"]&lt;/span&gt;&lt;/p&gt;
 &lt;/object&gt;
</pre> -->



<esp:sh>Text Lists</esp:sh>

<p>Lists of texts can be handled in either of two ways: as LIST files
or as URLS.</p>

<esp:sh>List Files</esp:sh>

<p>List files are simply files containing P, Q or X IDs.  They must be
placed in the directory <code>PROJECT/00lib/lists/</code>, e.g.,
in <code class="example">cams/00lib/lists/</code>. The rebuild process
installs the lists in the proper place.  You can then refer to your
list by name.</p>

<p>After creating a list file in the CAMS project with the name
<code>00lib/lists/ritual-drawings</code> and the content:</p>

<pre>P363719</pre>

<p>You can then refer to <code class="cookbook">http://oracc.museum.upenn.edu/cams/ritual-drawings</code>.</p>

<esp:sh>URLs</esp:sh>

<p>For small numbers of texts, it is convenient to give the P, Q or X IDs
in a comma-separated list after the project name:</p>

<pre class="cookbook">
http://oracc.museum.upenn.edu/saao/P334278,P334279
</pre>


<esp:h>Structure</esp:h>

<esp:sh>Users</esp:sh>

<p>The project organization is intended for use with multi-user
systems.  At the operating system level, each project is a user with a
password and a home directory.</p>

<esp:sh>Subprojects</esp:sh>

<p>Projects can also own subprojects, which also means that regular
users on a system can have their own personal projects.</p>

<esp:sh>Folders</esp:sh>

<p>The files used by a project live in several different folders (aka
directories).  The most important of these are:</p>

<dl>
<dt>00atf/</dt>
<dd>Contains ATF files, conventionally with a .atf or .txt
extension.</dd>
<dt>00cat/</dt>
<dd>Optionally contains an XML export of the project catalogue (if not using the CDLI catalogue).</dd>
<dt>00lib/</dt>
<dd>Contains project configuration files and the glossary files.</dd>
<dt>00res/</dt>
<dd>Optionally contains static downloads for the project's portal pages.</dd>
<dt>00web/</dt>
<dd>Contains web pages and web configuration files which used when the project is rebuilt.</dd>
</dl>

<esp:h>Management</esp:h>

<esp:sh>Interface</esp:sh>

<p>Project management tasks are carried out by logging on to the Oracc
server with a terminal programme and typing some simple Unix
commands. Images and files can also be uploaded by drag-and-drop. For more detailed information, see the page on <esp:link page="projunix">Project Management with Unix</esp:link>.</p>

<esp:sh>The <code>oracc</code> command</esp:sh>

<p>Once logged in as the project-user on the server, most tasks are
accomplished via the program <code>oracc</code>, which is fully documented <esp:link page="the-oracc-command">on another page</esp:link>.</p>


<esp:h>Procedures</esp:h>
<p>Project files are stored on the Oracc server, currently <esp:link
url="http://oracc.museum.upenn.edu"/>. <!-- Then there is a private,
build server, which displays the current version of the
project-in-progress. --> A stable version of the project is publicly viewable on one or more web servers, currently also <esp:link url="http://oracc.museum.upenn.edu"/>.</p>

<p>You can build your portal and corpus independently from one another: rebuilding one does not entail rebuilding the other.</p>

<p>For fuller instructions, see the pages on <esp:link page="projunix">Project Management with Unix</esp:link>.</p>

<esp:sh>Portal</esp:sh>
<p>Write your portal pages in ESP and upload them to <code>00web/</code>. Place any static content for your portal in <code>00res/</code>.</p>

<p>Run the oracc command to update the portal. <!--Preview it on the
build server. Once there are no errors and you are happy with how it
looks you can transfer a stable version from the build server to the
public web server. --></p>

<esp:sh>Catalogue </esp:sh>

<p>If you are using the CDLI catalogue then no action is required.  If
you are using a <esp:link page="projcats">custom or local catalogue</esp:link>, the project must be correctly
configured, then the catalogue updates must be placed in the
<code>00cat</code> folder with the file name(s) the project has
been configured to use.</p>

<p>There is a <esp:link page="projcats">separate page</esp:link> about setting up your own project catalogue.</p>

<esp:sh>Corpus </esp:sh>

<p>Transliterations should be placed in the <code>00atf/</code>
folder.  There can be one big file, one file per text, or something in
between; the rebuild process uses all the relevant files in
<code>00atf/</code>.</p>

<p>When new texts are added, simply run <esp:link
page="the-oracc-command">the oracc command</esp:link> to update the
website, indexes, etc. <!-- Preview the corpus on the build server. Once there are no errors and you are happy with how it looks you can transfer a stable version from the build server to the public web server.--></p>

<esp:sh>Glossaries </esp:sh>

<p>The recommended workflow for glossary building is:</p>

<ol>
<li>begin with text data which is ATF-clean.</li>
<li>lemmatize the texts; ensure they are ATF-clean with lem-checking,
then add them to the <code>00atf</code> directory.</li>
<li>run <code>oracc harvest</code>.</li>
<li>review <code>01bld/new/*.new</code> and fix <code>00atf/*.atf</code> and/or <code>00lib/*.glo</code> as required.</li>
<li>run <code>oracc merge [LANGUAGE]</code> (this automatically redoes the harvest).</li>
<!-- <li>run <code>boo</code> if all seems well to create a draft on the
build server.</li> -->
<li>if something goes wrong, you can retrieve the previous <code>*.glo</code>
file from the 'backups' directory--multiple <code>oracc merge [LANGUAGE]</code>
commands on the same day overwrite the same file.</li>
<!-- <li>Once there are no errors and you are happy with how the
     glossary looks you can transfer a stable version from the build
     server to the public web server.</li> -->
</ol>

<esp:author first-names="Steve" last-name="Tinney"/>
<esp:author first-names="Eleanor" last-name="Robson"/>
<esp:content-last-modified/>
<esp:email address="osc@oracc.org"/>


</body></html></esp:page>
