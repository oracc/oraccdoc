<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0"
	  xmlns="http://www.w3.org/1999/xhtml"
>

  <esp:title>Porting OSFE from P3 to P4</esp:title>
  <esp:name>Porting OSFE from P3 to P4</esp:name>
  
  <html><head/>
  <body>
      
<p>Notes on the changes needed to migrate OSFE (github
oracc-search-front-end repo) from P3 to P4.  Several TS modules parse
the Oracc HTML--often retrieving it as a text and parsing the text
form. </p>

<p>P4 is much more transparent than P3--you can learn a lot by going
to <esp:link url="https://build-oracc.museum.upenn.edu/neo">the neo
project</esp:link> and playing around with it to see what URLs are
producing which results.  The general P4 architecture is that any
action modifies variables on the page, then JS routines construct URLs
to change the page state and assign the URL to window.location. This
means that what you see in the URL bar is what was used to get the
results on the page (modulo bugs).</p>

<esp:sh>./src/app/pages/details/details.component.ts</esp:sh>

<pre>
    const metadataPanelInput = htmlData.getElementById('p3left');
    const middlePanelInput = htmlData.getElementById('p3right');
    const textPanelInput = htmlDataToBeReduced.getElementById('p3right');
</pre>

<p>In P3 there were just two panes; in P4 there are three.  The
p3right pane is the same but is now #p4XtfData--it is the text
display; the old #p3left pane is now split into the navigation/zoom
menu and the metadata panel.</p>

<h3>Zoom</h3>

<p>For zoom the inner enclosing div is #p4MenuOutline--the div has a
data attribute, data-zmax, which gives the maximum value of zoom
(i.e., the number of clickable headings in the zoom-menu.</p>

<p>Each zoomable para has act_zoom(n) as its onclick action where n is
the index of the zoom para among its siblings; the same n is also an
attribute data-zoom on the para so there's no need to parse the
onclick if you just need the zoom index.</p>

<h3>Metadata</h3>

<p>This is only available when a text item is being displayed. The div
#p4Item contains two divs: #p4XtfMeta and #p4XtfData.</p>

<h3>const controlsInput = htmlData.getElementById('p3controls');</h3>

<p>The arrangement and some details have changed, but in general this is now #p4Controls.</p>

<h3>Line/Page counts etc.</h3>

<p>There are several approaches to getting the count of data items in the current TS code:</p>

<pre>
this.totalLines = parseInt(
      controlsInput.querySelector(
        '.p3-pages .p3toccenter.bg-dk span:nth-of-type(5)'
      ).innerHTML,
      10
    );
...      
    this.totalPages = Array(
      parseInt(
        controlsInput.querySelector(
          '.p3-pages .p3toccenter.bg-dk span:nth-of-type(6)'
        ).innerHTML,
        10
	)
    )
...
  if (isTermData) {
      this.isTermDataShown = true;
      this.totalTexts = parseInt(
        controlsInput.querySelector(
          '#p3navRight .p3-items .p3toccenter.bg-dk span:nth-of-type(5)'
        ).innerHTML,
        10
      );
</pre>

<p>In P4 these approaches are unnecessary and don't work.  The
controls are divided into sections that are displayed or hidden
depending on what is being displayed.  Much of the information that is
needed is now on the #p4Pager div:</p>

<pre>
&lt;div id="p4Pager"
     class="bborder-top list item dcat itxt zoom default"
     data-proj="babii" data-list="outlined.lst" data-zoom="1"
     data-sort="12" data-prev=""
     data-item="X000088" data-next="X000082" data-bkmk="X000088">
</pre>

<p>Several data-XXX attributes are added to the divs that wrap
navigation blocks, #p4itemNav and #p4pageNav. They correspond to the
values displayed in the navigation display, e.g.:</p>

<pre>
        <span id="p4ItemView"> [ITEM 6 of 27] </span>
</pre>

<p>The items are:</p>

<dl>
  <dt><code>data-ityp</code></dt>
  <dd>The item type, ENTRY, ITEM,
  TEXT</dd>

  <dt><code>data-inth</code></dt>
  <dd>The index of the item currently being displayed ('6' in the
  example above). This is the index into the total list or current
  zoom-narrowing.</dd>
  
  <dt><code>data-imax</code></dt>
  <dd>The maximum value of <code>data-inth</code> in the current
  context; this is the number of items in the total list or current
  zoom-narrowing.</dd>
  
  <dt><code>data-page</code></dt><dd>The page currently being
  displayed in the total list or the current zoom-narrowing.</dd>

  <dt><code>data-pmax</code></dt><dd>The last possible page in the
  current context; this is is the number of pages the total list or
  current zoom-narrowing.</dd>
  
</dl>

<p>Here are some example for the URL <code>/neo/sux/o0023102</code> as
of 2024-06-06 (the numbers can change as neo's content changes):</p>

<pre>
  &lt;div id="p4itemNav" class="p4items" data-ityp="ENTRY" data-inth="3" data-imax="190">

  ...

  &lt;div id="p4PageNav" class="p4pages" data-page="1" data-pmax="8" data-imax="190">

</pre>


<p>Search results maintain two counts: the number of results and the
number of texts containing the results (three <code>lugal</code> in
one text is three results but one text). These are not yet properly
implemented as data-XXX attributes.</p>

<esp:sh>./src/app/pages/glossary-article/glossary-article.component.ts</esp:sh>

<p>One of the fundamental actions is getting the instance lists from glossary articles. This code:</p>

<pre>
   public handleTermClick(e) {
    const anchorEl = e.path
      ? e.path.find((el) => {
          return !!el.className ? el.className.match('icount') : '';
        })
      : composedPath(e.target).find((el) => {
          return !!el.className ? el.className.match('icount') : '';
        });

    if (!!anchorEl) {
      const anchorElText = anchorEl.querySelector('span')
        ? anchorEl.querySelector('span').innerText
        : anchorEl.innerText;
      e.preventDefault();
      const queryParams = anchorEl.href
        .split('(')
        .slice(1)
        .join()
        .slice(0, -1)
        .replace(/'/g, '')
        .split(',');
      const filteredText = anchorElText.match('%')
        ? Array.prototype.slice
            .call(anchorEl.parentNode.childNodes)
            .filter((node) => {
              return node.nodeType === 3 ? node : '';
            })[0].textContent
        : anchorElText;

      this.getDataService.setDetailsPageParams(
        queryParams[0],
        queryParams[1],
        queryParams[2]
      );
      this.getDataService.setChosenTermText(filteredText);

      // navigates to details component
      this.router.navigate([decodeURI(this.router.url), 'occurrences']);
    }
  }
</pre>

<p>Locates a link with class 'icount' and decodes the P3 JS link:</p>

<pre>
  &lt;p class="icount">
    &lt;a class="icount" href="javascript:distprof2('rimanum','akk-x-oldbab','akk.r00000a')">21 instances&lt;/a>
  &lt;/p>
</pre>

<p>This JS call still exists because the glossary articles are
essentially P3 legacy data; as a note to myself it would be good to
have an attribute data-gxis on the a.icount to give the 'akk.r00000a'
value; the project and glossary (here 'rimanum' and 'akk-x-oldbab',
but with neo 'neo' and 'akk-x-oldbab') are already on #p4Pager.</p>



<esp:sh>./src/app/pages/glossary-article-source/glossary-article-source.component.ts</esp:sh>

<p>The below seems to be trapping an error return from P3--I need to
evaluate whether that error return is still possible with the updates
to neo and P4 between them.</p>

<pre>
  private handleTextToHTMLConversion(text: string) {
    const parser = new DOMParser();
    const htmlData = parser.parseFromString(text, 'text/html');
    const glossaryContentInput = htmlData.getElementsByTagName('body')[0];

    if (
      glossaryContentInput.querySelector('p') &amp;&amp;
      (glossaryContentInput
        .querySelector('p')
        .innerText.toLowerCase()
        .match('no such map') ||
        glossaryContentInput
          .querySelector('p')
          .innerText.toLowerCase()
          .match('no html file found'))
    ) {
      this.glossaryContent = `<p class="glossary__fallback">No glossary article found</p>`;
    } else {
      this.glossaryContent = this.sanitizer.bypassSecurityTrustHtml(
        glossaryContentInput.innerHTML
      );
    }
  }
</pre>

<esp:sh>./src/app/pages/details-texts/details-texts.component.ts</esp:sh>

<p>Some of these are P3 legacy and have not changed:</p>

<pre>
      middlePanelInput.querySelectorAll('td').forEach((node) => {
      if (node.className === 't1 xtr') {
        if (typeof node.remove === 'function') {
          node.remove();
        } else {
          node.outerHTML = '';
        }
      }
    });
    textPanelInput.querySelectorAll('td').forEach((node) => {
      if (node.className !== 't1 xtr') {
        if (typeof node.remove === 'function') {
          node.remove();
        } else {
          node.outerHTML = '';
        }
      }
    });

</pre>

<p>I'm very unhappy about this one but don't have an immediate
solution--words that have lemmatization info have class "w" and
because of a formatting issue, if the next class-component is empty
you get "w ", and this parsing relies on "w " which feels wrong to
me:</p>

<pre>
    const anchorElWrapper = e.path
      ? e.path.find((el) => {
          return !!el.className ? el.className.includes('w ') : '';
        })
      : composedPath(e.target).find((el) => {
          return !!el.className ? el.className.includes('w ') : '';
        });
</pre>

<p>Others are scraping the p3controls for data counts, see above.</p>

<p>The following is not yet reimplemented in P4 (probably broken but untested):</p>

<pre>
        if (anchorEl.href.includes('showexemplar')) {
        sessionStorage.setItem(
          SESSION_KEYS.METADATA_CONTENT,
          this.unsanatizedMetadataPanel
        );
        this.router.navigate([this.router.url, 'source'], {
          state: { data: this.unsanatizedMetadataPanel }
        });
</pre>


<esp:sh>./src/app/services/get-data/get-data.service.ts</esp:sh>

<p>This module seems to be the only place that OSFE makes requests to
the server.</p>

<h3>Definitions</h3>

<pre>
  
  private baseUrl = environment.apiUrl;
  private searchURL = `${this.baseUrl}/search/`;
  private glossaryArticleURL = `${environment.glossaryArticleURL}/neo/`;
  private searchSuggestionsUrl = `${this.baseUrl}/suggest_all/`;
  private oraccBaseUrl = `${environment.glossaryArticleURL}`;

</pre>

<esp:sh>getSearchData()</esp:sh>

<pre>
  public getSearchData() {
    return this.http.get(this.searchURL + this.searchParam);
  }

  public getSearchSuggestionsData(partialSearchTerm: string) {
    return this.http.get(this.searchSuggestionsUrl + partialSearchTerm);
  }
</pre>

<p>These not P3/P4 URLs.</p>

<esp:sh>getGlossaryArticleData</esp:sh>

  <pre>
  public getGlossaryArticleData() {
    return this.http.get(this.glossaryArticleURL + this.lang + '/' + this.id, {
      responseType: 'text'
    });
  }
</pre>

<p>This is unchanged: this.lang is the language of the glossary;
this.id is the glossary article ID. E.g.,
<code>/neo/akk/x0001754</code>.</p>

<esp:sh>getProectTextData</esp:sh>

<pre>
  public getProjectTextData(params: ParamMap) { const projectId =
  params.get('projectId'); const subProjectId =
  params.get('subprojectId'); const textId = params.get('textId');

    const url = subProjectId
      ? `${this.oraccBaseUrl}/${projectId}/${subProjectId}/${textId}`
      : `${this.oraccBaseUrl}/${projectId}/${textId}`;

    return this.http.get(url, {
      responseType: 'text'
    });
  }
</pre>

<p>I'm not sure exactly what <code>projectId</code> and
<code>subProjectId</code> are, respectively, but I'm guessing that
between them they make the path to a project or subproject and then
<code>textId</code> is a PQX-number like P123456.</p>

<p>This has changed in P4 so from June 4th onwards all projects will use a
new form of this URL. It's an easy change.  In P3 this URL:</p>

<pre code="cookbook">
  https://build-oracc.museum.upenn.edu/dccmt/P010678
</pre>

<p>Retrieves just the HTML formatted version of the text along with
its metadata sidebar.</p>

<p>In P4 it retrieves the entire pager framework with the zoom/page
automatically configured.</p>

<p>The new form of the URL that OSFE needs to use adds <code>html</code> to the query string:</p>

<pre code="cookbook">
  https://build-oracc.museum.upenn.edu/neo/P010678?html
</pre>

<p>This URL now works, and the proxying from neo to the project where
the text actually lives is handled transparently on the server
side.</p>

<esp:sh>getSubsequentGlossaryArticleData()</esp:sh>

<pre>
   public getSubsequentGlossaryArticleData() {
    const bio = '\u2623'; // force encoding always to be utf8
    const encodedString = encodeURIComponent(bio + this.glossaryArticleParam);
    return this.http.get(this.glossaryArticleURL + 'sig?' + encodedString, {
      responseType: 'text'
    });
  }
</pre>

<p>This uses a URL that retrieves an article via its signature. It
emulates a JS function which has changed slightly from P3 to P4 (now
in /js/p4.js):</p>

<pre>
// In P3 sigfixer added (empty) lang and proj arguments to the pop1sig
// call but in P4 we have data-proj and are ignoring the old (and by
// default empty) lang arg for now
function pop1sig(sig) {
    var bio = '\u2623'; // force encoding always to be utf8
    var esig = encodeURIComponent(bio+sig);
    let pager = getPager();
    let proj = pager.getAttribute('data-proj');
    var url = '/'+proj+'/sig?'+esig;
    popup(url,'cbdarticle',400,600,0,0);
}
</pre>

<p>This means that code parsing the <code>pop1sig</code> function in
the HTML sources may need to be modified to recognize that the
signature is now the only parameter.</p>

<esp:sh>getDetailData()</esp:sh>

<pre>
 public getDetailData() {
    return this.http.get(
      `${this.oraccBaseUrl}/${this.urlParam}/${this.language}?xis=${this.queryString}`,
      {
        responseType: 'text'
      }
    );
  }
</pre>

<p>This URL retrieves an instance set from a glossary and relied on
the behaviour that a query string argument of the form
<code>?akk.r00123</code> was implicitly understood as an ID for an XML
Instance Set.</p>

<p>The underlying architecture has been generalized and the new form
requires explicitly using <code>?xis=akk.r00123</code>.</p>

<esp:sh>getDetailDataPage</esp:sh>

<pre>
  public getDetailDataPage(pageNumber) {
    return this.http.get(
      `${this.oraccBaseUrl}/${this.urlParam}/${this.language}/${this.queryString}?page=${pageNumber}`,
      {
        responseType: 'text'
      }
    );
  }
</pre>

<p>This URL steps through the instance set one page at a time. In P4
the list is moved to the query string and needs the <code>list=</code>
parameter specification as above.  The <code>page=[PAGENUMBER]</code>
remains the same, but I need to check on what was returned by P3 in these cases.</p>

<p>In P4 the return is an entire pager framework--I need to go back
and check the P3 code to see what that is doing here.</p>

<p>This is probably worth experimenting with even though I haven't had
a chance to review the code--you can probably dig what you need out of
the pager result and if not we can touch base about it and I can
adjust what the server is sending.</p>

<esp:sh>getTermData()</esp:sh>

<pre>
  public getTermData() {
    return this.http.get(`${this.glossaryArticleURL}${this.termDataParam}`, {
      responseType: 'text'
    });
  }
</pre>

<p>Help me out ... I'm not sure what is happening here.</p>


<esp:sh>getSourceData()</esp:sh>

<pre>
 public getSourceData() {
    let sourceDataURL = `${this.oraccBaseUrl}/${this.sourceParams[0]}/${this.sourceParams[1]}/html`;

    if (this.sourceParams[2].length > 0) {
      sourceDataURL = sourceDataURL + '?' + this.sourceParams[2];
      if (this.sourceParams[3].length > 0) {
        sourceDataURL = sourceDataURL + ',' + this.sourceParams[3];
      }
    }
    return this.http.get(sourceDataURL, {
      responseType: 'text'
    });
  }
</pre>

<p>Not sure about this.  If <code>${this.sourceParams[0]}</code> is a
project name and <code>${this.sourceParams[1]}</code> is a PQX-number
then this retrieves some form of the data for a text--when is it called?</p>

<p>Note that I have not yet reimplemented scores, sources, and
score-blocks in P4.</p>


<esp:sh>getPopupData</esp:sh>

<pre>
 public getPopupData(project: string, item: string, blockId: string) {
    return this.http.get(
      `${this.oraccBaseUrl}/${project}/${item}/score?${blockId}`,
      {
        responseType: 'text'
      }
    );
  }
</pre>

<p>This URL retrieves the block of data about a line that you get when
clicking on the line number in a score.  I haven't tested that yet but
it will likely change because P4 separates the format of data into the
query string and restricts the URL to giving only the content
data. This means that the new form of this is likely going to be
something like
<code>/dcclt/Q000001?what=score&amp;form=html</code>.</p>

</body></html></esp:page>
